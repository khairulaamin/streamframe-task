{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\streamframe-task-manager\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport './App.css';\nimport TaskFormPage from './pages/TaskFormPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Function to render tasks recursively\nconst RenderTasks = ({\n  tasks,\n  toggleTaskStatus\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"task-list\",\n  children: tasks.map(task => {\n    var _task$children;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [\"Task \", task.name, \" (ID: \", task.id, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this), \" - Status: \", task.status, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-counts\",\n          children: [\"Dependencies: \", task.dependencyCount || 0, \" | Done: \", task.doneCount || 0, \" | Complete: \", task.completeCount || 0]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"task-checkbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: task.status === 'DONE' || task.status === 'COMPLETE',\n            onChange: () => toggleTaskStatus(task)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this), task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), ((_task$children = task.children) === null || _task$children === void 0 ? void 0 : _task$children.length) > 0 &&\n      /*#__PURE__*/\n      // Using optional chaining\n      _jsxDEV(\"div\", {\n        className: \"child-tasks\",\n        children: /*#__PURE__*/_jsxDEV(RenderTasks, {\n          tasks: task.children,\n          toggleTaskStatus: toggleTaskStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, task.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  })\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 3\n}, this);\n_c = RenderTasks;\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('ALL');\n  const fetchTasks = useCallback(async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data = await response.json();\n      const tasksWithDependencies = await Promise.all(data.map(async task => {\n        const dependencyCount = await fetchDependencyCount(task.id);\n        const doneCount = await fetchDoneCount(task.id);\n        const completeCount = await fetchCompleteCount(task.id);\n        return {\n          ...task,\n          dependencyCount,\n          doneCount,\n          completeCount,\n          children: []\n        }; // Ensure children is initialized\n      }));\n      setTasks(tasksWithDependencies);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  }, []);\n  const fetchDependencyCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/dependencies`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch dependency count');\n      }\n      const data = await response.json();\n      return data.dependencyCount || 0;\n    } catch (error) {\n      console.error('Error fetching dependency count:', error);\n      return 0;\n    }\n  };\n  const fetchDoneCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/done-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch DONE count');\n      }\n      const data = await response.json();\n      return data.doneCount || 0;\n    } catch (error) {\n      console.error('Error fetching DONE count:', error);\n      return 0;\n    }\n  };\n  const fetchCompleteCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/complete-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch COMPLETE count');\n      }\n      const data = await response.json();\n      return data.completeCount || 0;\n    } catch (error) {\n      console.error('Error fetching COMPLETE count:', error);\n      return 0;\n    }\n  };\n  const toggleTaskStatus = async task => {\n    let updatedStatus;\n    const children = tasks.filter(t => t.parent_task_id === task.id);\n    if (children.length === 0) {\n      updatedStatus = task.status === 'COMPLETE' ? 'IN_PROGRESS' : 'COMPLETE';\n    } else {\n      const allComplete = children.every(child => child.status === 'COMPLETE');\n      const someInProgress = children.some(child => child.status === 'IN_PROGRESS');\n      if (task.status === 'COMPLETE') {\n        updatedStatus = 'IN_PROGRESS';\n      } else if (someInProgress) {\n        updatedStatus = 'DONE';\n      } else {\n        updatedStatus = 'COMPLETE';\n      }\n    }\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...task,\n          status: updatedStatus\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n      setTasks(prevTasks => prevTasks.map(t => {\n        if (t.id === task.id) {\n          return {\n            ...t,\n            status: updatedStatus\n          };\n        }\n        return t;\n      }));\n      const parentId = task.parent_task_id;\n      if (parentId) {\n        const siblings = tasks.filter(t => t.parent_task_id === parentId);\n        const allComplete = siblings.every(sibling => sibling.status === 'COMPLETE');\n        if (allComplete) {\n          await fetch(`http://localhost:5000/tasks/${parentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              status: 'COMPLETE'\n            })\n          });\n          setTasks(prevTasks => prevTasks.map(t => {\n            if (t.id === parentId) {\n              return {\n                ...t,\n                status: 'COMPLETE'\n              };\n            }\n            return t;\n          }));\n        }\n      }\n      window.location.reload();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again.');\n    }\n  };\n  const filteredTasks = tasks.filter(task => {\n    if (filter === 'ALL') return true;\n    if (filter === 'IN_PROGRESS') return task.status === 'IN_PROGRESS' || tasks.some(t => t.parent_task_id === task.id && t.status === 'IN_PROGRESS');\n    if (filter === 'DONE') return task.status === 'DONE' || tasks.some(t => t.parent_task_id === task.id && t.status === 'DONE');\n    if (filter === 'COMPLETE') return task.status === 'COMPLETE' || tasks.some(t => t.parent_task_id === task.id && t.status === 'COMPLETE');\n    return false;\n  });\n\n  // Function to build a nested structure\n  const buildTaskHierarchy = tasks => {\n    const taskMap = {};\n    const hierarchy = [];\n    tasks.forEach(task => {\n      taskMap[task.id] = {\n        ...task,\n        children: []\n      };\n    });\n    tasks.forEach(task => {\n      if (task.parent_task_id === null) {\n        hierarchy.push(taskMap[task.id]);\n      } else {\n        var _taskMap$task$parent_;\n        (_taskMap$task$parent_ = taskMap[task.parent_task_id]) === null || _taskMap$task$parent_ === void 0 ? void 0 : _taskMap$task$parent_.children.push(taskMap[task.id]);\n      }\n    });\n    return hierarchy;\n  };\n  const taskHierarchy = buildTaskHierarchy(filteredTasks);\n  useEffect(() => {\n    fetchTasks();\n  }, [fetchTasks]); // Include fetchTasks in dependency array\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Listing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Filter by status:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: filter,\n        onChange: e => setFilter(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ALL\",\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"IN_PROGRESS\",\n          children: \"IN PROGRESS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"DONE\",\n          children: \"DONE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"COMPLETE\",\n          children: \"COMPLETE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list\",\n      children: taskHierarchy.map(task => {\n        var _task$children2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"Task \", task.name, \" (ID: \", task.id, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this), \" - Status: \", task.status, /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-counts\",\n              children: [\"Dependencies: \", task.dependencyCount || 0, \" | Done: \", task.doneCount || 0, \" | Complete: \", task.completeCount || 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"task-checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: task.status === 'DONE' || task.status === 'COMPLETE',\n                onChange: () => toggleTaskStatus(task)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 17\n              }, this), task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this), ((_task$children2 = task.children) === null || _task$children2 === void 0 ? void 0 : _task$children2.length) > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"child-tasks\",\n            children: /*#__PURE__*/_jsxDEV(RenderTasks, {\n              tasks: task.children,\n              toggleTaskStatus: toggleTaskStatus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this)]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/task-form\",\n      children: \"Create New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"oSku91Gx3UtbZVMiRXjcu0PCilg=\");\n_c2 = TaskList;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(TaskList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/task-form\",\n        element: /*#__PURE__*/_jsxDEV(TaskFormPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n};\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"RenderTasks\");\n$RefreshReg$(_c2, \"TaskList\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","BrowserRouter","Router","Route","Routes","Link","TaskFormPage","jsxDEV","_jsxDEV","RenderTasks","tasks","toggleTaskStatus","className","children","map","task","_task$children","name","id","fileName","_jsxFileName","lineNumber","columnNumber","status","dependencyCount","doneCount","completeCount","type","checked","onChange","length","_c","TaskList","_s","setTasks","filter","setFilter","fetchTasks","response","fetch","ok","Error","data","json","tasksWithDependencies","Promise","all","fetchDependencyCount","fetchDoneCount","fetchCompleteCount","error","console","taskId","updatedStatus","t","parent_task_id","allComplete","every","child","someInProgress","some","method","headers","body","JSON","stringify","prevTasks","parentId","siblings","sibling","window","location","reload","alert","filteredTasks","buildTaskHierarchy","taskMap","hierarchy","forEach","push","_taskMap$task$parent_","taskHierarchy","value","e","target","_task$children2","to","_c2","App","path","element","_c3","$RefreshReg$"],"sources":["C:/Users/Acer/streamframe-task-manager/frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport './App.css';\nimport TaskFormPage from './pages/TaskFormPage';\n\ninterface Task {\n  id: number;\n  name: string;\n  status: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n  parent_task_id: number | null;\n  dependencyCount?: number;\n  doneCount?: number;\n  completeCount?: number;\n  children?: Task[]; \n}\n\n// Function to render tasks recursively\nconst RenderTasks = ({ tasks, toggleTaskStatus }: { tasks: Task[]; toggleTaskStatus: (task: Task) => void }) => (\n  <div className=\"task-list\">\n    {tasks.map(task => (\n      <div key={task.id} className=\"task-item\">\n        <div className=\"task-header\">\n          <strong>Task {task.name} (ID: {task.id})</strong> - Status: {task.status}\n          <div className=\"task-counts\">\n            Dependencies: {task.dependencyCount || 0} | Done: {task.doneCount || 0} | Complete: {task.completeCount || 0}\n          </div>\n          <label className=\"task-checkbox\">\n            <input\n              type=\"checkbox\"\n              checked={task.status === 'DONE' || task.status === 'COMPLETE'}\n              onChange={() => toggleTaskStatus(task)}\n            />\n            {task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE'}\n          </label>\n        </div>\n        {task.children?.length > 0 && ( // Using optional chaining\n          <div className=\"child-tasks\">\n            <RenderTasks tasks={task.children} toggleTaskStatus={toggleTaskStatus} />\n          </div>\n        )}\n      </div>\n    ))}\n  </div>\n);\n\nconst TaskList: React.FC = () => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [filter, setFilter] = useState<'ALL' | 'IN_PROGRESS' | 'DONE' | 'COMPLETE'>('ALL');\n\n  const fetchTasks = useCallback(async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data: Task[] = await response.json();\n\n      const tasksWithDependencies = await Promise.all(\n        data.map(async (task) => {\n          const dependencyCount = await fetchDependencyCount(task.id);\n          const doneCount = await fetchDoneCount(task.id);\n          const completeCount = await fetchCompleteCount(task.id);\n          return { ...task, dependencyCount, doneCount, completeCount, children: [] }; // Ensure children is initialized\n        })\n      );\n\n      setTasks(tasksWithDependencies);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  }, []);\n\n  const fetchDependencyCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/dependencies`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch dependency count');\n      }\n      const data = await response.json();\n      return data.dependencyCount || 0;\n    } catch (error) {\n      console.error('Error fetching dependency count:', error);\n      return 0;\n    }\n  };\n\n  const fetchDoneCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/done-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch DONE count');\n      }\n      const data = await response.json();\n      return data.doneCount || 0;\n    } catch (error) {\n      console.error('Error fetching DONE count:', error);\n      return 0;\n    }\n  };\n\n  const fetchCompleteCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/complete-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch COMPLETE count');\n      }\n      const data = await response.json();\n      return data.completeCount || 0;\n    } catch (error) {\n      console.error('Error fetching COMPLETE count:', error);\n      return 0;\n    }\n  };\n\n  const toggleTaskStatus = async (task: Task) => {\n    let updatedStatus: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n\n    const children = tasks.filter(t => t.parent_task_id === task.id);\n\n    if (children.length === 0) {\n      updatedStatus = task.status === 'COMPLETE' ? 'IN_PROGRESS' : 'COMPLETE';\n    } else {\n      const allComplete = children.every(child => child.status === 'COMPLETE');\n      const someInProgress = children.some(child => child.status === 'IN_PROGRESS');\n\n      if (task.status === 'COMPLETE') {\n        updatedStatus = 'IN_PROGRESS';\n      } else if (someInProgress) {\n        updatedStatus = 'DONE';\n      } else {\n        updatedStatus = 'COMPLETE';\n      }\n    }\n\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ...task, status: updatedStatus }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n\n      setTasks(prevTasks =>\n        prevTasks.map(t => {\n          if (t.id === task.id) {\n            return { ...t, status: updatedStatus };\n          }\n          return t;\n        })\n      );\n\n      const parentId = task.parent_task_id;\n      if (parentId) {\n        const siblings = tasks.filter(t => t.parent_task_id === parentId);\n        const allComplete = siblings.every(sibling => sibling.status === 'COMPLETE');\n\n        if (allComplete) {\n          await fetch(`http://localhost:5000/tasks/${parentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ status: 'COMPLETE' }),\n          });\n\n          setTasks(prevTasks =>\n            prevTasks.map(t => {\n              if (t.id === parentId) {\n                return { ...t, status: 'COMPLETE' };\n              }\n              return t;\n            })\n          );\n        }\n      }\n\n      window.location.reload();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again.');\n    }\n  };\n\n  const filteredTasks = tasks.filter(task => {\n    if (filter === 'ALL') return true;\n    if (filter === 'IN_PROGRESS') return task.status === 'IN_PROGRESS' || tasks.some(t => t.parent_task_id === task.id && t.status === 'IN_PROGRESS');\n    if (filter === 'DONE') return task.status === 'DONE' || tasks.some(t => t.parent_task_id === task.id && t.status === 'DONE');\n    if (filter === 'COMPLETE') return task.status === 'COMPLETE' || tasks.some(t => t.parent_task_id === task.id && t.status === 'COMPLETE');\n    return false;\n  });\n\n  // Function to build a nested structure\n  const buildTaskHierarchy = (tasks: Task[]) => {\n    const taskMap: { [key: number]: Task & { children: Task[] } } = {};\n    const hierarchy: (Task & { children: Task[] })[] = [];\n\n    tasks.forEach(task => {\n      taskMap[task.id] = { ...task, children: [] };\n    });\n\n    tasks.forEach(task => {\n      if (task.parent_task_id === null) {\n        hierarchy.push(taskMap[task.id]);\n      } else {\n        taskMap[task.parent_task_id]?.children.push(taskMap[task.id]);\n      }\n    });\n\n    return hierarchy;\n  };\n\n  const taskHierarchy = buildTaskHierarchy(filteredTasks);\n\n  useEffect(() => {\n    fetchTasks();\n  }, [fetchTasks]); // Include fetchTasks in dependency array\n\n  return (\n    <div className=\"task-list-container\">\n      <h1>Task Listing</h1>\n      <label>\n        Filter by status:\n        <select value={filter} onChange={(e) => setFilter(e.target.value as 'ALL' | 'IN_PROGRESS' | 'DONE' | 'COMPLETE')}>\n          <option value=\"ALL\">All</option>\n          <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n          <option value=\"DONE\">DONE</option>\n          <option value=\"COMPLETE\">COMPLETE</option>\n        </select>\n      </label>\n      <div className=\"task-list\">\n        {taskHierarchy.map(task => (\n          <div key={task.id} className=\"task-item\">\n            <div className=\"task-header\">\n              <strong>Task {task.name} (ID: {task.id})</strong> - Status: {task.status}\n              <div className=\"task-counts\">\n                Dependencies: {task.dependencyCount || 0} | Done: {task.doneCount || 0} | Complete: {task.completeCount || 0}\n              </div>\n              <label className=\"task-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  checked={task.status === 'DONE' || task.status === 'COMPLETE'}\n                  onChange={() => toggleTaskStatus(task)}\n                />\n                {task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE'}\n              </label>\n            </div>\n            {task.children?.length > 0 && (\n              <div className=\"child-tasks\">\n                <RenderTasks tasks={task.children} toggleTaskStatus={toggleTaskStatus} />\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n      <Link to=\"/task-form\">Create New Task</Link>\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<TaskList />} />\n        <Route path=\"/task-form\" element={<TaskFormPage />} />\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,QAAQ,kBAAkB;AAC/E,OAAO,WAAW;AAClB,OAAOC,YAAY,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAahD;AACA,MAAMC,WAAW,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAA4E,CAAC,kBACzGH,OAAA;EAAKI,SAAS,EAAC,WAAW;EAAAC,QAAA,EACvBH,KAAK,CAACI,GAAG,CAACC,IAAI;IAAA,IAAAC,cAAA;IAAA,oBACbR,OAAA;MAAmBI,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACtCL,OAAA;QAAKI,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BL,OAAA;UAAAK,QAAA,GAAQ,OAAK,EAACE,IAAI,CAACE,IAAI,EAAC,QAAM,EAACF,IAAI,CAACG,EAAE,EAAC,GAAC;QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAAW,EAACP,IAAI,CAACQ,MAAM,eACxEf,OAAA;UAAKI,SAAS,EAAC,aAAa;UAAAC,QAAA,GAAC,gBACb,EAACE,IAAI,CAACS,eAAe,IAAI,CAAC,EAAC,WAAS,EAACT,IAAI,CAACU,SAAS,IAAI,CAAC,EAAC,eAAa,EAACV,IAAI,CAACW,aAAa,IAAI,CAAC;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzG,CAAC,eACNd,OAAA;UAAOI,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC9BL,OAAA;YACEmB,IAAI,EAAC,UAAU;YACfC,OAAO,EAAEb,IAAI,CAACQ,MAAM,KAAK,MAAM,IAAIR,IAAI,CAACQ,MAAM,KAAK,UAAW;YAC9DM,QAAQ,EAAEA,CAAA,KAAMlB,gBAAgB,CAACI,IAAI;UAAE;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC,CAAC,EACDP,IAAI,CAACQ,MAAM,KAAK,MAAM,IAAIR,IAAI,CAACQ,MAAM,KAAK,UAAU,GAAG,sBAAsB,GAAG,eAAe;QAAA;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3F,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,EACL,EAAAN,cAAA,GAAAD,IAAI,CAACF,QAAQ,cAAAG,cAAA,uBAAbA,cAAA,CAAec,MAAM,IAAG,CAAC;MAAA;MAAM;MAC9BtB,OAAA;QAAKI,SAAS,EAAC,aAAa;QAAAC,QAAA,eAC1BL,OAAA,CAACC,WAAW;UAACC,KAAK,EAAEK,IAAI,CAACF,QAAS;UAACF,gBAAgB,EAAEA;QAAiB;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtE,CACN;IAAA,GAnBOP,IAAI,CAACG,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAoBZ,CAAC;EAAA,CACP;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACC,CACN;AAACS,EAAA,GA1BItB,WAAW;AA4BjB,MAAMuB,QAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACvB,KAAK,EAAEwB,QAAQ,CAAC,GAAGnC,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACoC,MAAM,EAAEC,SAAS,CAAC,GAAGrC,QAAQ,CAA8C,KAAK,CAAC;EAExF,MAAMsC,UAAU,GAAGrC,WAAW,CAAC,YAAY;IACzC,IAAI;MACF,MAAMsC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;MAC3D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,MAAMC,IAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAE1C,MAAMC,qBAAqB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC7CJ,IAAI,CAAC5B,GAAG,CAAC,MAAOC,IAAI,IAAK;QACvB,MAAMS,eAAe,GAAG,MAAMuB,oBAAoB,CAAChC,IAAI,CAACG,EAAE,CAAC;QAC3D,MAAMO,SAAS,GAAG,MAAMuB,cAAc,CAACjC,IAAI,CAACG,EAAE,CAAC;QAC/C,MAAMQ,aAAa,GAAG,MAAMuB,kBAAkB,CAAClC,IAAI,CAACG,EAAE,CAAC;QACvD,OAAO;UAAE,GAAGH,IAAI;UAAES,eAAe;UAAEC,SAAS;UAAEC,aAAa;UAAEb,QAAQ,EAAE;QAAG,CAAC,CAAC,CAAC;MAC/E,CAAC,CACH,CAAC;MAEDqB,QAAQ,CAACU,qBAAqB,CAAC;IACjC,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMH,oBAAoB,GAAG,MAAOK,MAAc,IAAK;IACrD,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+Ba,MAAM,eAAe,CAAC;MAClF,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;MACrD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAAClB,eAAe,IAAI,CAAC;IAClC,CAAC,CAAC,OAAO0B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,OAAO,CAAC;IACV;EACF,CAAC;EAED,MAAMF,cAAc,GAAG,MAAOI,MAAc,IAAK;IAC/C,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+Ba,MAAM,aAAa,CAAC;MAChF,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACjB,SAAS,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOyB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,CAAC;IACV;EACF,CAAC;EAED,MAAMD,kBAAkB,GAAG,MAAOG,MAAc,IAAK;IACnD,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+Ba,MAAM,iBAAiB,CAAC;MACpF,IAAI,CAACd,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;MACnD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAAChB,aAAa,IAAI,CAAC;IAChC,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,OAAO,CAAC;IACV;EACF,CAAC;EAED,MAAMvC,gBAAgB,GAAG,MAAOI,IAAU,IAAK;IAC7C,IAAIsC,aAAkD;IAEtD,MAAMxC,QAAQ,GAAGH,KAAK,CAACyB,MAAM,CAACmB,CAAC,IAAIA,CAAC,CAACC,cAAc,KAAKxC,IAAI,CAACG,EAAE,CAAC;IAEhE,IAAIL,QAAQ,CAACiB,MAAM,KAAK,CAAC,EAAE;MACzBuB,aAAa,GAAGtC,IAAI,CAACQ,MAAM,KAAK,UAAU,GAAG,aAAa,GAAG,UAAU;IACzE,CAAC,MAAM;MACL,MAAMiC,WAAW,GAAG3C,QAAQ,CAAC4C,KAAK,CAACC,KAAK,IAAIA,KAAK,CAACnC,MAAM,KAAK,UAAU,CAAC;MACxE,MAAMoC,cAAc,GAAG9C,QAAQ,CAAC+C,IAAI,CAACF,KAAK,IAAIA,KAAK,CAACnC,MAAM,KAAK,aAAa,CAAC;MAE7E,IAAIR,IAAI,CAACQ,MAAM,KAAK,UAAU,EAAE;QAC9B8B,aAAa,GAAG,aAAa;MAC/B,CAAC,MAAM,IAAIM,cAAc,EAAE;QACzBN,aAAa,GAAG,MAAM;MACxB,CAAC,MAAM;QACLA,aAAa,GAAG,UAAU;MAC5B;IACF;IAEA,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+BxB,IAAI,CAACG,EAAE,EAAE,EAAE;QACrE2C,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAE,GAAGlD,IAAI;UAAEQ,MAAM,EAAE8B;QAAc,CAAC;MACzD,CAAC,CAAC;MAEF,IAAI,CAACf,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MACjD;MAEAP,QAAQ,CAACgC,SAAS,IAChBA,SAAS,CAACpD,GAAG,CAACwC,CAAC,IAAI;QACjB,IAAIA,CAAC,CAACpC,EAAE,KAAKH,IAAI,CAACG,EAAE,EAAE;UACpB,OAAO;YAAE,GAAGoC,CAAC;YAAE/B,MAAM,EAAE8B;UAAc,CAAC;QACxC;QACA,OAAOC,CAAC;MACV,CAAC,CACH,CAAC;MAED,MAAMa,QAAQ,GAAGpD,IAAI,CAACwC,cAAc;MACpC,IAAIY,QAAQ,EAAE;QACZ,MAAMC,QAAQ,GAAG1D,KAAK,CAACyB,MAAM,CAACmB,CAAC,IAAIA,CAAC,CAACC,cAAc,KAAKY,QAAQ,CAAC;QACjE,MAAMX,WAAW,GAAGY,QAAQ,CAACX,KAAK,CAACY,OAAO,IAAIA,OAAO,CAAC9C,MAAM,KAAK,UAAU,CAAC;QAE5E,IAAIiC,WAAW,EAAE;UACf,MAAMjB,KAAK,CAAC,+BAA+B4B,QAAQ,EAAE,EAAE;YACrDN,MAAM,EAAE,KAAK;YACbC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAE1C,MAAM,EAAE;YAAW,CAAC;UAC7C,CAAC,CAAC;UAEFW,QAAQ,CAACgC,SAAS,IAChBA,SAAS,CAACpD,GAAG,CAACwC,CAAC,IAAI;YACjB,IAAIA,CAAC,CAACpC,EAAE,KAAKiD,QAAQ,EAAE;cACrB,OAAO;gBAAE,GAAGb,CAAC;gBAAE/B,MAAM,EAAE;cAAW,CAAC;YACrC;YACA,OAAO+B,CAAC;UACV,CAAC,CACH,CAAC;QACH;MACF;MAEAgB,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnDuB,KAAK,CAAC,iDAAiD,CAAC;IAC1D;EACF,CAAC;EAED,MAAMC,aAAa,GAAGhE,KAAK,CAACyB,MAAM,CAACpB,IAAI,IAAI;IACzC,IAAIoB,MAAM,KAAK,KAAK,EAAE,OAAO,IAAI;IACjC,IAAIA,MAAM,KAAK,aAAa,EAAE,OAAOpB,IAAI,CAACQ,MAAM,KAAK,aAAa,IAAIb,KAAK,CAACkD,IAAI,CAACN,CAAC,IAAIA,CAAC,CAACC,cAAc,KAAKxC,IAAI,CAACG,EAAE,IAAIoC,CAAC,CAAC/B,MAAM,KAAK,aAAa,CAAC;IACjJ,IAAIY,MAAM,KAAK,MAAM,EAAE,OAAOpB,IAAI,CAACQ,MAAM,KAAK,MAAM,IAAIb,KAAK,CAACkD,IAAI,CAACN,CAAC,IAAIA,CAAC,CAACC,cAAc,KAAKxC,IAAI,CAACG,EAAE,IAAIoC,CAAC,CAAC/B,MAAM,KAAK,MAAM,CAAC;IAC5H,IAAIY,MAAM,KAAK,UAAU,EAAE,OAAOpB,IAAI,CAACQ,MAAM,KAAK,UAAU,IAAIb,KAAK,CAACkD,IAAI,CAACN,CAAC,IAAIA,CAAC,CAACC,cAAc,KAAKxC,IAAI,CAACG,EAAE,IAAIoC,CAAC,CAAC/B,MAAM,KAAK,UAAU,CAAC;IACxI,OAAO,KAAK;EACd,CAAC,CAAC;;EAEF;EACA,MAAMoD,kBAAkB,GAAIjE,KAAa,IAAK;IAC5C,MAAMkE,OAAuD,GAAG,CAAC,CAAC;IAClE,MAAMC,SAA0C,GAAG,EAAE;IAErDnE,KAAK,CAACoE,OAAO,CAAC/D,IAAI,IAAI;MACpB6D,OAAO,CAAC7D,IAAI,CAACG,EAAE,CAAC,GAAG;QAAE,GAAGH,IAAI;QAAEF,QAAQ,EAAE;MAAG,CAAC;IAC9C,CAAC,CAAC;IAEFH,KAAK,CAACoE,OAAO,CAAC/D,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACwC,cAAc,KAAK,IAAI,EAAE;QAChCsB,SAAS,CAACE,IAAI,CAACH,OAAO,CAAC7D,IAAI,CAACG,EAAE,CAAC,CAAC;MAClC,CAAC,MAAM;QAAA,IAAA8D,qBAAA;QACL,CAAAA,qBAAA,GAAAJ,OAAO,CAAC7D,IAAI,CAACwC,cAAc,CAAC,cAAAyB,qBAAA,uBAA5BA,qBAAA,CAA8BnE,QAAQ,CAACkE,IAAI,CAACH,OAAO,CAAC7D,IAAI,CAACG,EAAE,CAAC,CAAC;MAC/D;IACF,CAAC,CAAC;IAEF,OAAO2D,SAAS;EAClB,CAAC;EAED,MAAMI,aAAa,GAAGN,kBAAkB,CAACD,aAAa,CAAC;EAEvD5E,SAAS,CAAC,MAAM;IACduC,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC,CAAC,CAAC;;EAElB,oBACE7B,OAAA;IAAKI,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAClCL,OAAA;MAAAK,QAAA,EAAI;IAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBd,OAAA;MAAAK,QAAA,GAAO,mBAEL,eAAAL,OAAA;QAAQ0E,KAAK,EAAE/C,MAAO;QAACN,QAAQ,EAAGsD,CAAC,IAAK/C,SAAS,CAAC+C,CAAC,CAACC,MAAM,CAACF,KAAoD,CAAE;QAAArE,QAAA,gBAC/GL,OAAA;UAAQ0E,KAAK,EAAC,KAAK;UAAArE,QAAA,EAAC;QAAG;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChCd,OAAA;UAAQ0E,KAAK,EAAC,aAAa;UAAArE,QAAA,EAAC;QAAW;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChDd,OAAA;UAAQ0E,KAAK,EAAC,MAAM;UAAArE,QAAA,EAAC;QAAI;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAClCd,OAAA;UAAQ0E,KAAK,EAAC,UAAU;UAAArE,QAAA,EAAC;QAAQ;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eACRd,OAAA;MAAKI,SAAS,EAAC,WAAW;MAAAC,QAAA,EACvBoE,aAAa,CAACnE,GAAG,CAACC,IAAI;QAAA,IAAAsE,eAAA;QAAA,oBACrB7E,OAAA;UAAmBI,SAAS,EAAC,WAAW;UAAAC,QAAA,gBACtCL,OAAA;YAAKI,SAAS,EAAC,aAAa;YAAAC,QAAA,gBAC1BL,OAAA;cAAAK,QAAA,GAAQ,OAAK,EAACE,IAAI,CAACE,IAAI,EAAC,QAAM,EAACF,IAAI,CAACG,EAAE,EAAC,GAAC;YAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAAW,EAACP,IAAI,CAACQ,MAAM,eACxEf,OAAA;cAAKI,SAAS,EAAC,aAAa;cAAAC,QAAA,GAAC,gBACb,EAACE,IAAI,CAACS,eAAe,IAAI,CAAC,EAAC,WAAS,EAACT,IAAI,CAACU,SAAS,IAAI,CAAC,EAAC,eAAa,EAACV,IAAI,CAACW,aAAa,IAAI,CAAC;YAAA;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACzG,CAAC,eACNd,OAAA;cAAOI,SAAS,EAAC,eAAe;cAAAC,QAAA,gBAC9BL,OAAA;gBACEmB,IAAI,EAAC,UAAU;gBACfC,OAAO,EAAEb,IAAI,CAACQ,MAAM,KAAK,MAAM,IAAIR,IAAI,CAACQ,MAAM,KAAK,UAAW;gBAC9DM,QAAQ,EAAEA,CAAA,KAAMlB,gBAAgB,CAACI,IAAI;cAAE;gBAAAI,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACxC,CAAC,EACDP,IAAI,CAACQ,MAAM,KAAK,MAAM,IAAIR,IAAI,CAACQ,MAAM,KAAK,UAAU,GAAG,sBAAsB,GAAG,eAAe;YAAA;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3F,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,EACL,EAAA+D,eAAA,GAAAtE,IAAI,CAACF,QAAQ,cAAAwE,eAAA,uBAAbA,eAAA,CAAevD,MAAM,IAAG,CAAC,iBACxBtB,OAAA;YAAKI,SAAS,EAAC,aAAa;YAAAC,QAAA,eAC1BL,OAAA,CAACC,WAAW;cAACC,KAAK,EAAEK,IAAI,CAACF,QAAS;cAACF,gBAAgB,EAAEA;YAAiB;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtE,CACN;QAAA,GAnBOP,IAAI,CAACG,EAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAoBZ,CAAC;MAAA,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNd,OAAA,CAACH,IAAI;MAACiF,EAAE,EAAC,YAAY;MAAAzE,QAAA,EAAC;IAAe;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV,CAAC;AAACW,EAAA,CAzNID,QAAkB;AAAAuD,GAAA,GAAlBvD,QAAkB;AA2NxB,MAAMwD,GAAa,GAAGA,CAAA,KAAM;EAC1B,oBACEhF,OAAA,CAACN,MAAM;IAAAW,QAAA,eACLL,OAAA,CAACJ,MAAM;MAAAS,QAAA,gBACLL,OAAA,CAACL,KAAK;QAACsF,IAAI,EAAC,GAAG;QAACC,OAAO,eAAElF,OAAA,CAACwB,QAAQ;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACzCd,OAAA,CAACL,KAAK;QAACsF,IAAI,EAAC,YAAY;QAACC,OAAO,eAAElF,OAAA,CAACF,YAAY;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAACqE,GAAA,GATIH,GAAa;AAWnB,eAAeA,GAAG;AAAC,IAAAzD,EAAA,EAAAwD,GAAA,EAAAI,GAAA;AAAAC,YAAA,CAAA7D,EAAA;AAAA6D,YAAA,CAAAL,GAAA;AAAAK,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}