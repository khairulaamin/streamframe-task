{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\streamframe-task-manager\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport './App.css';\nimport TaskFormPage from './pages/TaskFormPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Recursive component to render tasks and their children\nconst TaskItem = ({\n  task,\n  toggleTaskStatus\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Task \", task.name, \" (ID: \", task.id, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), \" - Status: \", task.status, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-counts\",\n        children: [\"Dependencies: \", task.dependencyCount || 0, \" | Done: \", task.doneCount || 0, \" | Complete: \", task.completeCount || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"task-checkbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: task.status === 'DONE' || task.status === 'COMPLETE',\n          onChange: () => toggleTaskStatus(task)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), task.children && task.children.length > 0 &&\n    /*#__PURE__*/\n    // Check if children exist\n    _jsxDEV(\"div\", {\n      className: \"child-tasks\",\n      children: task.children.map(child =>\n      /*#__PURE__*/\n      // Specify type for child\n      _jsxDEV(TaskItem, {\n        task: child,\n        toggleTaskStatus: toggleTaskStatus\n      }, child.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_c = TaskItem;\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data = await response.json();\n      const tasksWithDependencies = await Promise.all(data.map(async task => {\n        const dependencyCount = await fetchDependencyCount(task.id);\n        const doneCount = await fetchDoneCount(task.id);\n        const completeCount = await fetchCompleteCount(task.id);\n        return {\n          ...task,\n          dependencyCount,\n          doneCount,\n          completeCount\n        };\n      }));\n      setTasks(tasksWithDependencies);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n  const fetchDependencyCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/dependencies`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch dependency count');\n      }\n      const data = await response.json();\n      return data.dependencyCount || 0;\n    } catch (error) {\n      console.error('Error fetching dependency count:', error);\n      return 0;\n    }\n  };\n  const fetchDoneCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/done-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch DONE count');\n      }\n      const data = await response.json();\n      return data.doneCount || 0;\n    } catch (error) {\n      console.error('Error fetching DONE count:', error);\n      return 0;\n    }\n  };\n  const fetchCompleteCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/complete-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch COMPLETE count');\n      }\n      const data = await response.json();\n      return data.completeCount || 0;\n    } catch (error) {\n      console.error('Error fetching COMPLETE count:', error);\n      return 0;\n    }\n  };\n  const toggleTaskStatus = async task => {\n    let updatedStatus;\n    const children = tasks.filter(t => t.parent_task_id === task.id);\n    if (children.length === 0) {\n      updatedStatus = task.status === 'COMPLETE' ? 'IN_PROGRESS' : 'COMPLETE';\n    } else {\n      const allComplete = children.every(child => child.status === 'COMPLETE');\n      const someInProgress = children.some(child => child.status === 'IN_PROGRESS');\n      if (task.status === 'COMPLETE') {\n        updatedStatus = 'IN_PROGRESS';\n      } else if (someInProgress) {\n        updatedStatus = 'DONE';\n      } else {\n        updatedStatus = 'COMPLETE';\n      }\n    }\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...task,\n          status: updatedStatus\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n      setTasks(prevTasks => prevTasks.map(t => {\n        if (t.id === task.id) {\n          return {\n            ...t,\n            status: updatedStatus\n          };\n        }\n        return t;\n      }));\n      const parentId = task.parent_task_id;\n      if (parentId) {\n        const siblings = tasks.filter(t => t.parent_task_id === parentId);\n        const allComplete = siblings.every(sibling => sibling.status === 'COMPLETE');\n        if (allComplete) {\n          await fetch(`http://localhost:5000/tasks/${parentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              status: 'COMPLETE'\n            })\n          });\n          setTasks(prevTasks => prevTasks.map(t => {\n            if (t.id === parentId) {\n              return {\n                ...t,\n                status: 'COMPLETE'\n              };\n            }\n            return t;\n          }));\n        }\n      }\n      window.location.reload();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again.');\n    }\n  };\n  const filteredTasks = tasks; // Removed filtering for now\n\n  // Function to build a nested structure\n  const buildTaskHierarchy = tasks => {\n    const taskMap = {};\n    const hierarchy = [];\n    tasks.forEach(task => {\n      taskMap[task.id] = {\n        ...task,\n        children: []\n      }; // Initialize children as an empty array\n    });\n    tasks.forEach(task => {\n      if (task.parent_task_id === null) {\n        hierarchy.push(taskMap[task.id]);\n      } else {\n        var _taskMap$task$parent_;\n        (_taskMap$task$parent_ = taskMap[task.parent_task_id]) === null || _taskMap$task$parent_ === void 0 ? void 0 : _taskMap$task$parent_.children.push(taskMap[task.id]);\n      }\n    });\n    return hierarchy;\n  };\n  const taskHierarchy = buildTaskHierarchy(filteredTasks);\n  useEffect(() => {\n    fetchTasks();\n  }, []); // Ensure to keep the fetchTasks function here\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list\",\n    children: taskHierarchy.map(task => /*#__PURE__*/_jsxDEV(TaskItem, {\n      task: task,\n      toggleTaskStatus: toggleTaskStatus\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n};\n\n// Sidebar component\n_s(TaskList, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c2 = TaskList;\nconst Sidebar = () => /*#__PURE__*/_jsxDEV(\"nav\", {\n  className: \"sidebar\",\n  children: /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Task Listing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/task-form\",\n        children: \"Task Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 227,\n  columnNumber: 3\n}, this);\n\n// Main App component with Router and Sidebar\n_c3 = Sidebar;\nconst App = () => /*#__PURE__*/_jsxDEV(Router, {\n  children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(TaskList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/task-form\",\n      element: /*#__PURE__*/_jsxDEV(TaskFormPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 41\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 237,\n  columnNumber: 3\n}, this);\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"TaskItem\");\n$RefreshReg$(_c2, \"TaskList\");\n$RefreshReg$(_c3, \"Sidebar\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","Router","Route","Routes","Link","TaskFormPage","jsxDEV","_jsxDEV","TaskItem","task","toggleTaskStatus","className","children","name","id","fileName","_jsxFileName","lineNumber","columnNumber","status","dependencyCount","doneCount","completeCount","type","checked","onChange","length","map","child","_c","TaskList","_s","tasks","setTasks","fetchTasks","response","fetch","ok","Error","data","json","tasksWithDependencies","Promise","all","fetchDependencyCount","fetchDoneCount","fetchCompleteCount","error","console","taskId","updatedStatus","filter","t","parent_task_id","allComplete","every","someInProgress","some","method","headers","body","JSON","stringify","prevTasks","parentId","siblings","sibling","window","location","reload","alert","filteredTasks","buildTaskHierarchy","taskMap","hierarchy","forEach","push","_taskMap$task$parent_","taskHierarchy","_c2","Sidebar","to","_c3","App","path","element","_c4","$RefreshReg$"],"sources":["C:/Users/Acer/streamframe-task-manager/frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport './App.css';\nimport TaskFormPage from './pages/TaskFormPage';\n\ninterface Task {\n  id: number;\n  name: string;\n  status: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n  parent_task_id: number | null;\n  dependencyCount?: number;\n  doneCount?: number;\n  completeCount?: number;\n  children?: Task[]; // This can be undefined, make sure to handle it\n}\n\n// Recursive component to render tasks and their children\nconst TaskItem: React.FC<{ task: Task; toggleTaskStatus: (task: Task) => void }> = ({ task, toggleTaskStatus }) => {\n  return (\n    <div className=\"task-item\">\n      <div className=\"task-header\">\n        <strong>Task {task.name} (ID: {task.id})</strong> - Status: {task.status}\n        <div className=\"task-counts\">\n          Dependencies: {task.dependencyCount || 0} | Done: {task.doneCount || 0} | Complete: {task.completeCount || 0}\n        </div>\n        <label className=\"task-checkbox\">\n          <input\n            type=\"checkbox\"\n            checked={task.status === 'DONE' || task.status === 'COMPLETE'}\n            onChange={() => toggleTaskStatus(task)}\n          />\n          {task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE'}\n        </label>\n      </div>\n      {task.children && task.children.length > 0 && ( // Check if children exist\n        <div className=\"child-tasks\">\n          {task.children.map((child: Task) => ( // Specify type for child\n            <TaskItem key={child.id} task={child} toggleTaskStatus={toggleTaskStatus} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst TaskList: React.FC = () => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data: Task[] = await response.json();\n\n      const tasksWithDependencies = await Promise.all(\n        data.map(async (task) => {\n          const dependencyCount = await fetchDependencyCount(task.id);\n          const doneCount = await fetchDoneCount(task.id);\n          const completeCount = await fetchCompleteCount(task.id);\n          return { ...task, dependencyCount, doneCount, completeCount };\n        })\n      );\n\n      setTasks(tasksWithDependencies);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  const fetchDependencyCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/dependencies`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch dependency count');\n      }\n      const data = await response.json();\n      return data.dependencyCount || 0;\n    } catch (error) {\n      console.error('Error fetching dependency count:', error);\n      return 0;\n    }\n  };\n\n  const fetchDoneCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/done-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch DONE count');\n      }\n      const data = await response.json();\n      return data.doneCount || 0;\n    } catch (error) {\n      console.error('Error fetching DONE count:', error);\n      return 0;\n    }\n  };\n\n  const fetchCompleteCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/complete-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch COMPLETE count');\n      }\n      const data = await response.json();\n      return data.completeCount || 0;\n    } catch (error) {\n      console.error('Error fetching COMPLETE count:', error);\n      return 0;\n    }\n  };\n\n  const toggleTaskStatus = async (task: Task) => {\n    let updatedStatus: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n\n    const children = tasks.filter(t => t.parent_task_id === task.id);\n\n    if (children.length === 0) {\n      updatedStatus = task.status === 'COMPLETE' ? 'IN_PROGRESS' : 'COMPLETE';\n    } else {\n      const allComplete = children.every(child => child.status === 'COMPLETE');\n      const someInProgress = children.some(child => child.status === 'IN_PROGRESS');\n\n      if (task.status === 'COMPLETE') {\n        updatedStatus = 'IN_PROGRESS';\n      } else if (someInProgress) {\n        updatedStatus = 'DONE';\n      } else {\n        updatedStatus = 'COMPLETE';\n      }\n    }\n\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ...task, status: updatedStatus }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n\n      setTasks(prevTasks =>\n        prevTasks.map(t => {\n          if (t.id === task.id) {\n            return { ...t, status: updatedStatus };\n          }\n          return t;\n        })\n      );\n\n      const parentId = task.parent_task_id;\n      if (parentId) {\n        const siblings = tasks.filter(t => t.parent_task_id === parentId);\n        const allComplete = siblings.every(sibling => sibling.status === 'COMPLETE');\n\n        if (allComplete) {\n          await fetch(`http://localhost:5000/tasks/${parentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ status: 'COMPLETE' }),\n          });\n\n          setTasks(prevTasks =>\n            prevTasks.map(t => {\n              if (t.id === parentId) {\n                return { ...t, status: 'COMPLETE' };\n              }\n              return t;\n            })\n          );\n        }\n      }\n\n      window.location.reload();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again.');\n    }\n  };\n\n  const filteredTasks = tasks; // Removed filtering for now\n\n  // Function to build a nested structure\n  const buildTaskHierarchy = (tasks: Task[]) => {\n    const taskMap: { [key: number]: Task & { children: Task[] } } = {};\n    const hierarchy: (Task & { children: Task[] })[] = [];\n  \n    tasks.forEach(task => {\n      taskMap[task.id] = { ...task, children: [] }; // Initialize children as an empty array\n    });\n  \n    tasks.forEach(task => {\n      if (task.parent_task_id === null) {\n        hierarchy.push(taskMap[task.id]);\n      } else {\n        taskMap[task.parent_task_id]?.children.push(taskMap[task.id]);\n      }\n    });\n  \n    return hierarchy;\n  };\n\n  const taskHierarchy = buildTaskHierarchy(filteredTasks);\n\n  useEffect(() => {\n    fetchTasks();\n  }, []); // Ensure to keep the fetchTasks function here\n\n  return (\n    <div className=\"task-list\">\n      {taskHierarchy.map(task => (\n        <TaskItem key={task.id} task={task} toggleTaskStatus={toggleTaskStatus} />\n      ))}\n    </div>\n  );\n};\n\n// Sidebar component\nconst Sidebar: React.FC = () => (\n  <nav className=\"sidebar\">\n    <ul>\n      <li><Link to=\"/\">Task Listing</Link></li>\n      <li><Link to=\"/task-form\">Task Form</Link></li>\n    </ul>\n  </nav>\n);\n\n// Main App component with Router and Sidebar\nconst App: React.FC = () => (\n  <Router>\n    <Sidebar />\n    <Routes>\n      <Route path=\"/\" element={<TaskList />} />\n      <Route path=\"/task-form\" element={<TaskFormPage />} />\n    </Routes>\n  </Router>\n);\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}