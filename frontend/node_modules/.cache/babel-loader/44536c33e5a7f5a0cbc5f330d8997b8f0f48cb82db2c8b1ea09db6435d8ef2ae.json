{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\streamframe-task-manager\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// Task Component for individual task rendering\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Task = ({\n  task,\n  onStatusChange\n}) => {\n  const handleCheckboxChange = event => {\n    onStatusChange(task.id, event.target.checked ? 'DONE' : 'IN_PROGRESS');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginLeft: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: task.status === 'DONE',\n      onChange: handleCheckboxChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: task.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), task.children && task.children.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: task.children.map(child => /*#__PURE__*/_jsxDEV(Task, {\n        task: child,\n        onStatusChange: onStatusChange\n      }, child.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n// Main TaskList component\n_c = Task;\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const fetchTasks = async () => {\n      const response = await fetch('http://localhost:5000/tasks');\n      const data = await response.json();\n      setTasks(data);\n    };\n    fetchTasks();\n  }, []);\n  const handleStatusChange = async (taskId, newStatus) => {\n    await fetch(`http://localhost:5000/tasks/${taskId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        status: newStatus\n      })\n    });\n\n    // Refresh tasks after updating status\n    const response = await fetch('http://localhost:5000/tasks');\n    const updatedTasks = await response.json();\n    setTasks(updatedTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(Task, {\n      task: task,\n      onStatusChange: handleStatusChange\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c2 = TaskList;\nexport default TaskList;\nvar _c, _c2;\n$RefreshReg$(_c, \"Task\");\n$RefreshReg$(_c2, \"TaskList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Task","task","onStatusChange","handleCheckboxChange","event","id","target","checked","style","marginLeft","children","type","status","onChange","fileName","_jsxFileName","lineNumber","columnNumber","name","length","map","child","_c","TaskList","_s","tasks","setTasks","fetchTasks","response","fetch","data","json","handleStatusChange","taskId","newStatus","method","headers","body","JSON","stringify","updatedTasks","_c2","$RefreshReg$"],"sources":["C:/Users/Acer/streamframe-task-manager/frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\n// Task Component for individual task rendering\nconst Task: React.FC<{ task: any; onStatusChange: (taskId: number, newStatus: string) => void; }> = ({ task, onStatusChange }) => {\n  const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onStatusChange(task.id, event.target.checked ? 'DONE' : 'IN_PROGRESS');\n  };\n\n  return (\n    <div style={{ marginLeft: '20px' }}>\n      <input\n        type=\"checkbox\"\n        checked={task.status === 'DONE'}\n        onChange={handleCheckboxChange}\n      />\n      <span>{task.name}</span>\n      {/* Optionally display child tasks if they exist */}\n      {task.children && task.children.length > 0 && (\n        <div>\n          {task.children.map((child: any) => (\n            <Task key={child.id} task={child} onStatusChange={onStatusChange} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Main TaskList component\nconst TaskList: React.FC = () => {\n  const [tasks, setTasks] = useState<any[]>([]);\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      const response = await fetch('http://localhost:5000/tasks');\n      const data = await response.json();\n      setTasks(data);\n    };\n\n    fetchTasks();\n  }, []);\n\n  const handleStatusChange = async (taskId: number, newStatus: string) => {\n    await fetch(`http://localhost:5000/tasks/${taskId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ status: newStatus }),\n    });\n\n    // Refresh tasks after updating status\n    const response = await fetch('http://localhost:5000/tasks');\n    const updatedTasks = await response.json();\n    setTasks(updatedTasks);\n  };\n\n  return (\n    <div>\n      <h1>Task List</h1>\n      {tasks.map((task) => (\n        <Task key={task.id} task={task} onStatusChange={handleStatusChange} />\n      ))}\n    </div>\n  );\n};\n\nexport default TaskList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}