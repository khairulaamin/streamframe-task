{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\streamframe-task-manager\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport './App.css';\nimport TaskFormPage from './pages/TaskFormPage';\n\n// Define Task interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sidebar = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Task Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/task-form\",\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_c = Sidebar;\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('ALL');\n\n  // Fetch tasks function\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data = await response.json();\n      const tasksWithDependencies = await Promise.all(data.map(async task => {\n        const dependencyCount = await fetchDependencyCount(task.id);\n        const doneCount = await fetchDoneCount(task.id);\n        const completeCount = await fetchCompleteCount(task.id);\n        return {\n          ...task,\n          dependencyCount,\n          doneCount,\n          completeCount\n        };\n      }));\n      setTasks(tasksWithDependencies);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n  const fetchDependencyCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/dependencies`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch dependency count');\n      }\n      const data = await response.json();\n      return data.dependencyCount || 0;\n    } catch (error) {\n      console.error('Error fetching dependency count:', error);\n      return 0;\n    }\n  };\n  const fetchDoneCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/done-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch DONE count');\n      }\n      const data = await response.json();\n      return data.doneCount || 0;\n    } catch (error) {\n      console.error('Error fetching DONE count:', error);\n      return 0;\n    }\n  };\n  const fetchCompleteCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/complete-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch COMPLETE count');\n      }\n      const data = await response.json();\n      return data.completeCount || 0;\n    } catch (error) {\n      console.error('Error fetching COMPLETE count:', error);\n      return 0;\n    }\n  };\n  const toggleTaskStatus = async task => {\n    let updatedStatus;\n    const children = tasks.filter(t => t.parent_task_id === task.id);\n    if (children.length === 0) {\n      updatedStatus = task.status === 'COMPLETE' ? 'IN_PROGRESS' : 'COMPLETE';\n    } else {\n      const allComplete = children.every(child => child.status === 'COMPLETE');\n      const someInProgress = children.some(child => child.status === 'IN_PROGRESS');\n      if (task.status === 'COMPLETE') {\n        updatedStatus = 'IN_PROGRESS';\n      } else if (someInProgress) {\n        updatedStatus = 'DONE';\n      } else {\n        updatedStatus = 'COMPLETE';\n      }\n    }\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...task,\n          status: updatedStatus\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n      setTasks(prevTasks => prevTasks.map(t => {\n        if (t.id === task.id) {\n          return {\n            ...t,\n            status: updatedStatus\n          };\n        }\n        return t;\n      }));\n      const parentId = task.parent_task_id;\n      if (parentId) {\n        const siblings = tasks.filter(t => t.parent_task_id === parentId);\n        const allComplete = siblings.every(sibling => sibling.status === 'COMPLETE');\n        if (allComplete) {\n          await fetch(`http://localhost:5000/tasks/${parentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              status: 'COMPLETE'\n            })\n          });\n          setTasks(prevTasks => prevTasks.map(t => {\n            if (t.id === parentId) {\n              return {\n                ...t,\n                status: 'COMPLETE'\n              };\n            }\n            return t;\n          }));\n        }\n      }\n      window.location.reload();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again.');\n    }\n  };\n\n  // Filter logic for tasks\n  const filteredTasks = tasks.filter(task => {\n    if (filter === 'ALL') return true;\n    if (filter === 'IN_PROGRESS') return task.status === 'IN_PROGRESS' || tasks.some(t => t.parent_task_id === task.id && t.status === 'IN_PROGRESS');\n    if (filter === 'DONE') return task.status === 'DONE' || tasks.some(t => t.parent_task_id === task.id && t.status === 'DONE');\n    if (filter === 'COMPLETE') return task.status === 'COMPLETE' || tasks.some(t => t.parent_task_id === task.id && t.status === 'COMPLETE');\n    return false;\n  });\n\n  // Function to build a nested structure of tasks\n  const buildTaskHierarchy = tasks => {\n    const taskMap = {};\n    const hierarchy = [];\n    tasks.forEach(task => {\n      taskMap[task.id] = {\n        ...task,\n        children: []\n      };\n    });\n    tasks.forEach(task => {\n      if (task.parent_task_id === null) {\n        hierarchy.push(taskMap[task.id]);\n      } else {\n        var _taskMap$task$parent_;\n        (_taskMap$task$parent_ = taskMap[task.parent_task_id]) === null || _taskMap$task$parent_ === void 0 ? void 0 : _taskMap$task$parent_.children.push(taskMap[task.id]);\n      }\n    });\n    return hierarchy;\n  };\n  const taskHierarchy = buildTaskHierarchy(filteredTasks);\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-list-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Task Listing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Filter by status:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: filter,\n          onChange: e => setFilter(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ALL\",\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"IN_PROGRESS\",\n            children: \"IN PROGRESS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"DONE\",\n            children: \"DONE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"COMPLETE\",\n            children: \"COMPLETE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-list\",\n        children: taskHierarchy.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"task-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"Task \", task.name, \" (ID: \", task.id, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this), \" - Status: \", task.status, /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-counts\",\n              children: [\"Dependencies: \", task.dependencyCount || 0, \" | Done: \", task.doneCount || 0, \" | Complete: \", task.completeCount || 0]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"task-checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: task.status === 'DONE' || task.status === 'COMPLETE',\n                onChange: () => toggleTaskStatus(task)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 19\n              }, this), task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), task.children.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"child-tasks\",\n            children: task.children.map(child => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-item\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [\"Subtask \", child.name, \" (ID: \", child.id, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 245,\n                  columnNumber: 25\n                }, this), \" - Status: \", child.status, /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"task-checkbox\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: child.status === 'DONE' || child.status === 'COMPLETE',\n                    onChange: () => toggleTaskStatus(child)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 247,\n                    columnNumber: 27\n                  }, this), child.status === 'DONE' || child.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 246,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 23\n              }, this)\n            }, child.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 17\n          }, this)]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"JemSKEgOUJgSGPl2+QsZ86Ys8/Y=\");\n_c2 = TaskList;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(TaskList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/task-form\",\n        element: /*#__PURE__*/_jsxDEV(TaskFormPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 5\n  }, this);\n};\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Sidebar\");\n$RefreshReg$(_c2, \"TaskList\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","Router","Route","Routes","Link","TaskFormPage","jsxDEV","_jsxDEV","Sidebar","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","TaskList","_s","tasks","setTasks","filter","setFilter","fetchTasks","response","fetch","ok","Error","data","json","tasksWithDependencies","Promise","all","map","task","dependencyCount","fetchDependencyCount","id","doneCount","fetchDoneCount","completeCount","fetchCompleteCount","error","console","taskId","toggleTaskStatus","updatedStatus","t","parent_task_id","length","status","allComplete","every","child","someInProgress","some","method","headers","body","JSON","stringify","prevTasks","parentId","siblings","sibling","window","location","reload","alert","filteredTasks","buildTaskHierarchy","taskMap","hierarchy","forEach","push","_taskMap$task$parent_","taskHierarchy","value","onChange","e","target","name","type","checked","_c2","App","path","element","_c3","$RefreshReg$"],"sources":["C:/Users/Acer/streamframe-task-manager/frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport './App.css';\nimport TaskFormPage from './pages/TaskFormPage';\n\n// Define Task interface\ninterface Task {\n  id: number;\n  name: string;\n  status: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n  parent_task_id: number | null;\n  dependencyCount?: number;\n  doneCount?: number; \n  completeCount?: number; \n}\n\nconst Sidebar: React.FC = () => {\n  return (\n    <div className=\"sidebar\">\n      <h2>Task Management</h2>\n      <ul>\n        <li><Link to=\"/\">Home</Link></li>\n        <li><Link to=\"/task-form\">Add Task</Link></li>\n        {/* Add more sidebar links as needed */}\n      </ul>\n    </div>\n  );\n};\n\nconst TaskList: React.FC = () => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [filter, setFilter] = useState<'ALL' | 'IN_PROGRESS' | 'DONE' | 'COMPLETE'>('ALL');\n\n  // Fetch tasks function\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data: Task[] = await response.json();\n\n      const tasksWithDependencies = await Promise.all(\n        data.map(async (task) => {\n          const dependencyCount = await fetchDependencyCount(task.id);\n          const doneCount = await fetchDoneCount(task.id);\n          const completeCount = await fetchCompleteCount(task.id);\n          return { ...task, dependencyCount, doneCount, completeCount };\n        })\n      );\n\n      setTasks(tasksWithDependencies);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  const fetchDependencyCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/dependencies`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch dependency count');\n      }\n      const data = await response.json();\n      return data.dependencyCount || 0;\n    } catch (error) {\n      console.error('Error fetching dependency count:', error);\n      return 0;\n    }\n  };\n\n  const fetchDoneCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/done-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch DONE count');\n      }\n      const data = await response.json();\n      return data.doneCount || 0;\n    } catch (error) {\n      console.error('Error fetching DONE count:', error);\n      return 0;\n    }\n  };\n\n  const fetchCompleteCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/complete-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch COMPLETE count');\n      }\n      const data = await response.json();\n      return data.completeCount || 0;\n    } catch (error) {\n      console.error('Error fetching COMPLETE count:', error);\n      return 0;\n    }\n  };\n\n  const toggleTaskStatus = async (task: Task) => {\n    let updatedStatus: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n\n    const children = tasks.filter(t => t.parent_task_id === task.id);\n\n    if (children.length === 0) {\n      updatedStatus = task.status === 'COMPLETE' ? 'IN_PROGRESS' : 'COMPLETE';\n    } else {\n      const allComplete = children.every(child => child.status === 'COMPLETE');\n      const someInProgress = children.some(child => child.status === 'IN_PROGRESS');\n\n      if (task.status === 'COMPLETE') {\n        updatedStatus = 'IN_PROGRESS';\n      } else if (someInProgress) {\n        updatedStatus = 'DONE';\n      } else {\n        updatedStatus = 'COMPLETE';\n      }\n    }\n\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ...task, status: updatedStatus }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n\n      setTasks(prevTasks =>\n        prevTasks.map(t => {\n          if (t.id === task.id) {\n            return { ...t, status: updatedStatus };\n          }\n          return t;\n        })\n      );\n\n      const parentId = task.parent_task_id;\n      if (parentId) {\n        const siblings = tasks.filter(t => t.parent_task_id === parentId);\n        const allComplete = siblings.every(sibling => sibling.status === 'COMPLETE');\n\n        if (allComplete) {\n          await fetch(`http://localhost:5000/tasks/${parentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ status: 'COMPLETE' }),\n          });\n\n          setTasks(prevTasks =>\n            prevTasks.map(t => {\n              if (t.id === parentId) {\n                return { ...t, status: 'COMPLETE' };\n              }\n              return t;\n            })\n          );\n        }\n      }\n\n      window.location.reload();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again.');\n    }\n  };\n\n  // Filter logic for tasks\n  const filteredTasks = tasks.filter(task => {\n    if (filter === 'ALL') return true;\n    if (filter === 'IN_PROGRESS') return task.status === 'IN_PROGRESS' || tasks.some(t => t.parent_task_id === task.id && t.status === 'IN_PROGRESS');\n    if (filter === 'DONE') return task.status === 'DONE' || tasks.some(t => t.parent_task_id === task.id && t.status === 'DONE');\n    if (filter === 'COMPLETE') return task.status === 'COMPLETE' || tasks.some(t => t.parent_task_id === task.id && t.status === 'COMPLETE');\n    return false;\n  });\n\n  // Function to build a nested structure of tasks\n  const buildTaskHierarchy = (tasks: Task[]) => {\n    const taskMap: { [key: number]: Task & { children: Task[] } } = {};\n    const hierarchy: (Task & { children: Task[] })[] = [];\n\n    tasks.forEach(task => {\n      taskMap[task.id] = { ...task, children: [] };\n    });\n\n    tasks.forEach(task => {\n      if (task.parent_task_id === null) {\n        hierarchy.push(taskMap[task.id]);\n      } else {\n        taskMap[task.parent_task_id]?.children.push(taskMap[task.id]);\n      }\n    });\n\n    return hierarchy;\n  };\n\n  const taskHierarchy = buildTaskHierarchy(filteredTasks);\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  return (\n    <div className=\"task-list-container\">\n      <Sidebar />\n      <div className=\"task-list-content\">\n        <h1>Task Listing</h1>\n        <label>\n          Filter by status:\n          <select value={filter} onChange={(e) => setFilter(e.target.value as 'ALL' | 'IN_PROGRESS' | 'DONE' | 'COMPLETE')}>\n            <option value=\"ALL\">All</option>\n            <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n            <option value=\"DONE\">DONE</option>\n            <option value=\"COMPLETE\">COMPLETE</option>\n          </select>\n        </label>\n        <div className=\"task-list\">\n          {taskHierarchy.map(task => (\n            <div key={task.id} className=\"task-item\">\n              <div className=\"task-header\">\n                <strong>Task {task.name} (ID: {task.id})</strong> - Status: {task.status}\n                <div className=\"task-counts\">\n                  Dependencies: {task.dependencyCount || 0} | Done: {task.doneCount || 0} | Complete: {task.completeCount || 0}\n                </div>\n                <label className=\"task-checkbox\">\n                  <input\n                    type=\"checkbox\"\n                    checked={task.status === 'DONE' || task.status === 'COMPLETE'}\n                    onChange={() => toggleTaskStatus(task)}\n                  />\n                  {task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE'}\n                </label>\n              </div>\n              {task.children.length > 0 && (\n                <div className=\"child-tasks\">\n                  {task.children.map(child => (\n                    <div key={child.id} className=\"task-item\">\n                      <div className=\"task-header\">\n                        <strong>Subtask {child.name} (ID: {child.id})</strong> - Status: {child.status}\n                        <label className=\"task-checkbox\">\n                          <input\n                            type=\"checkbox\"\n                            checked={child.status === 'DONE' || child.status === 'COMPLETE'}\n                            onChange={() => toggleTaskStatus(child)}\n                          />\n                          {child.status === 'DONE' || child.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE'}\n                        </label>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<TaskList />} />\n        <Route path=\"/task-form\" element={<TaskFormPage />} />\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}