{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\streamframe-task-manager\\\\frontend\\\\src\\\\pages\\\\TaskFormPage.tsx\",\n  _s = $RefreshSig$();\n// src/DashboardPage.tsx\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskCreationForm = () => {\n  _s();\n  const [taskName, setTaskName] = useState('');\n  const [error, setError] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    if (!taskName) {\n      setError('Task name is required');\n      return;\n    }\n    try {\n      const response = await fetch('http://localhost:5000/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: taskName\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to create task');\n      }\n      const newTask = await response.json();\n      console.log('Task created:', newTask);\n\n      // Clear the form after successful task creation\n      setTaskName('');\n    } catch (error) {\n      setError('Error creating task');\n      console.error('Error creating task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create a New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Task Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: taskName,\n          onChange: e => setTaskName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Parent Task ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: parentTaskId,\n          onChange: e => setTaskName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCreationForm, \"L4y6FnBde69YBNlGLEFL/UHgbAI=\");\n_c = TaskCreationForm;\nexport default TaskCreationForm;\nvar _c;\n$RefreshReg$(_c, \"TaskCreationForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TaskCreationForm","_s","taskName","setTaskName","error","setError","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","name","ok","Error","newTask","json","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onSubmit","type","value","onChange","target","required","parentTaskId","_c","$RefreshReg$"],"sources":["C:/Users/Acer/streamframe-task-manager/frontend/src/pages/TaskFormPage.tsx"],"sourcesContent":["// src/DashboardPage.tsx\r\n\r\nimport React, { useState } from 'react';\r\n\r\nconst TaskCreationForm: React.FC = () => {\r\n  const [taskName, setTaskName] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setError('');\r\n\r\n    if (!taskName) {\r\n      setError('Task name is required');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/tasks', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ name: taskName }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to create task');\r\n      }\r\n\r\n      const newTask = await response.json();\r\n      console.log('Task created:', newTask);\r\n\r\n      // Clear the form after successful task creation\r\n      setTaskName('');\r\n    } catch (error) {\r\n      setError('Error creating task');\r\n      console.error('Error creating task:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Create a New Task</h2>\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Task Name:\r\n          <input\r\n            type=\"text\"\r\n            value={taskName}\r\n            onChange={(e) => setTaskName(e.target.value)}\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Parent Task ID:\r\n          <input\r\n            type=\"text\"\r\n            value={parentTaskId}\r\n            onChange={(e) => setTaskName(e.target.value)}\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Create Task</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskCreationForm;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}