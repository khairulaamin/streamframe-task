{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\streamframe-task-manager\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport './App.css';\nimport TaskFormPage from './pages/TaskFormPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Function to render tasks recursively\nconst RenderTasks = ({\n  tasks,\n  toggleTaskStatus,\n  handleEditTask\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"task-list\",\n  children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Task \", task.name, \" (ID: \", task.id, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), \" - Status: \", task.status, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-counts\",\n        children: [\"Dependencies: \", task.dependencyCount || 0, \" | Done: \", task.doneCount || 0, \" | Complete: \", task.completeCount || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"task-checkbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: task.status === 'DONE' || task.status === 'COMPLETE',\n          onChange: () => toggleTaskStatus(task)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this), task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleEditTask(task),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this), task.children.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"child-tasks\",\n      children: /*#__PURE__*/_jsxDEV(RenderTasks, {\n        tasks: task.children,\n        toggleTaskStatus: toggleTaskStatus,\n        handleEditTask: handleEditTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this)]\n  }, task.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 7\n  }, this))\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 3\n}, this);\n_c = RenderTasks;\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('ALL');\n  const [editingTaskId, setEditingTaskId] = useState(null);\n  const [newTaskName, setNewTaskName] = useState('');\n  const fetchTasks = useCallback(async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data = await response.json();\n      const tasksWithDependencies = await Promise.all(data.map(async task => {\n        const dependencyCount = await fetchDependencyCount(task.id);\n        const doneCount = await fetchDoneCount(task.id);\n        const completeCount = await fetchCompleteCount(task.id);\n        return {\n          ...task,\n          dependencyCount,\n          doneCount,\n          completeCount,\n          children: []\n        };\n      }));\n      setTasks(tasksWithDependencies);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  }, []);\n  const fetchDependencyCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/dependencies`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch dependency count');\n      }\n      const data = await response.json();\n      return data.dependencyCount || 0;\n    } catch (error) {\n      console.error('Error fetching dependency count:', error);\n      return 0;\n    }\n  };\n  const fetchDoneCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/done-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch DONE count');\n      }\n      const data = await response.json();\n      return data.doneCount || 0;\n    } catch (error) {\n      console.error('Error fetching DONE count:', error);\n      return 0;\n    }\n  };\n  const fetchCompleteCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/complete-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch COMPLETE count');\n      }\n      const data = await response.json();\n      return data.completeCount || 0;\n    } catch (error) {\n      console.error('Error fetching COMPLETE count:', error);\n      return 0;\n    }\n  };\n  const toggleTaskStatus = async task => {\n    let updatedStatus;\n    const children = tasks.filter(t => t.parent_task_id === task.id);\n    if (children.length === 0) {\n      updatedStatus = task.status === 'COMPLETE' ? 'IN_PROGRESS' : 'COMPLETE';\n    } else {\n      const allComplete = children.every(child => child.status === 'COMPLETE');\n      const someInProgress = children.some(child => child.status === 'IN_PROGRESS');\n      if (task.status === 'COMPLETE') {\n        updatedStatus = 'IN_PROGRESS';\n      } else if (someInProgress) {\n        updatedStatus = 'DONE';\n      } else {\n        updatedStatus = 'COMPLETE';\n      }\n    }\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...task,\n          status: updatedStatus\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n      setTasks(prevTasks => prevTasks.map(t => {\n        if (t.id === task.id) {\n          return {\n            ...t,\n            status: updatedStatus\n          };\n        }\n        return t;\n      }));\n      const parentId = task.parent_task_id;\n      if (parentId) {\n        const siblings = tasks.filter(t => t.parent_task_id === parentId);\n        const allComplete = siblings.every(sibling => sibling.status === 'COMPLETE');\n        if (allComplete) {\n          await fetch(`http://localhost:5000/tasks/${parentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              status: 'COMPLETE'\n            })\n          });\n          setTasks(prevTasks => prevTasks.map(t => {\n            if (t.id === parentId) {\n              return {\n                ...t,\n                status: 'COMPLETE'\n              };\n            }\n            return t;\n          }));\n        }\n      }\n      window.location.reload();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again.');\n    }\n  };\n  const handleEditTask = task => {\n    setEditingTaskId(task.id);\n    setNewTaskName(task.name);\n  };\n  const handleSaveEdit = async () => {\n    if (editingTaskId !== null) {\n      try {\n        const response = await fetch(`http://localhost:5000/tasks/edit/${editingTaskId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            ...tasks.find(t => t.id === editingTaskId),\n            name: newTaskName\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to update task name');\n        }\n        setTasks(prevTasks => prevTasks.map(t => t.id === editingTaskId ? {\n          ...t,\n          name: newTaskName\n        } : t));\n        setEditingTaskId(null);\n        setNewTaskName('');\n      } catch (error) {\n        console.error('Error updating task name:', error);\n        alert('Failed to update task name. Please try again.');\n      }\n    }\n  };\n  const filteredTasks = tasks.filter(task => {\n    if (filter === 'ALL') return true;\n    if (filter === 'IN_PROGRESS') return task.status === 'IN_PROGRESS' || tasks.some(t => t.parent_task_id === task.id && t.status === 'IN_PROGRESS');\n    if (filter === 'DONE') return task.status === 'DONE' || tasks.some(t => t.parent_task_id === task.id && t.status === 'DONE');\n    if (filter === 'COMPLETE') return task.status === 'COMPLETE' || tasks.some(t => t.parent_task_id === task.id && t.status === 'COMPLETE');\n    return false;\n  });\n\n  // Function to build a nested structure\n  const buildTaskHierarchy = tasks => {\n    const taskMap = {};\n    const hierarchy = [];\n    tasks.forEach(task => {\n      taskMap[task.id] = {\n        ...task,\n        children: []\n      };\n    });\n    tasks.forEach(task => {\n      if (task.parent_task_id === null) {\n        hierarchy.push(taskMap[task.id]);\n      } else if (taskMap[task.parent_task_id]) {\n        taskMap[task.parent_task_id].children.push(taskMap[task.id]);\n      }\n    });\n    return hierarchy;\n  };\n  useEffect(() => {\n    fetchTasks();\n  }, [fetchTasks]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Filter tasks: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: filter,\n        onChange: e => setFilter(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ALL\",\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"IN_PROGRESS\",\n          children: \"In Progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"DONE\",\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"COMPLETE\",\n          children: \"Complete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RenderTasks, {\n      tasks: buildTaskHierarchy(filteredTasks),\n      toggleTaskStatus: toggleTaskStatus,\n      handleEditTask: handleEditTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), editingTaskId !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edit-task-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newTaskName,\n        onChange: e => setNewTaskName(e.target.value),\n        placeholder: \"Enter new task name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveEdit,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setEditingTaskId(null),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"Hp3o5IQb2eutozFZMXRQR4Z0WMc=\");\n_c2 = TaskList;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              children: \"Task List\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/create\",\n              children: \"Create Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(TaskList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/create\",\n          element: /*#__PURE__*/_jsxDEV(TaskFormPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n};\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"RenderTasks\");\n$RefreshReg$(_c2, \"TaskList\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","BrowserRouter","Router","Route","Routes","Link","TaskFormPage","jsxDEV","_jsxDEV","RenderTasks","tasks","toggleTaskStatus","handleEditTask","className","children","map","task","name","id","fileName","_jsxFileName","lineNumber","columnNumber","status","dependencyCount","doneCount","completeCount","type","checked","onChange","onClick","length","_c","TaskList","_s","setTasks","filter","setFilter","editingTaskId","setEditingTaskId","newTaskName","setNewTaskName","fetchTasks","response","fetch","ok","Error","data","json","tasksWithDependencies","Promise","all","fetchDependencyCount","fetchDoneCount","fetchCompleteCount","error","console","taskId","updatedStatus","t","parent_task_id","allComplete","every","child","someInProgress","some","method","headers","body","JSON","stringify","prevTasks","parentId","siblings","sibling","window","location","reload","alert","handleSaveEdit","find","filteredTasks","buildTaskHierarchy","taskMap","hierarchy","forEach","push","value","e","target","placeholder","_c2","App","to","path","element","_c3","$RefreshReg$"],"sources":["C:/Users/Acer/streamframe-task-manager/frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport './App.css';\nimport TaskFormPage from './pages/TaskFormPage';\n\ninterface Task {\n  id: number;\n  name: string;\n  status: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n  parent_task_id: number | null;\n  dependencyCount?: number;\n  doneCount?: number;\n  completeCount?: number;\n  children: Task[]; // Ensure children is always initialized as an array\n}\n\n// Function to render tasks recursively\nconst RenderTasks = ({ tasks, toggleTaskStatus, handleEditTask }: { tasks: Task[]; toggleTaskStatus: (task: Task) => void, handleEditTask: (task: Task) => void }) => (\n  <div className=\"task-list\">\n    {tasks.map(task => (\n      <div key={task.id} className=\"task-item\">\n        <div className=\"task-header\">\n          <strong>Task {task.name} (ID: {task.id})</strong> - Status: {task.status}\n          <div className=\"task-counts\">\n            Dependencies: {task.dependencyCount || 0} | Done: {task.doneCount || 0} | Complete: {task.completeCount || 0}\n          </div>\n          <label className=\"task-checkbox\">\n            <input\n              type=\"checkbox\"\n              checked={task.status === 'DONE' || task.status === 'COMPLETE'}\n              onChange={() => toggleTaskStatus(task)}\n            />\n            {task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE'}\n          </label>\n          <button onClick={() => handleEditTask(task)}>Edit</button>\n        </div>\n        {task.children.length > 0 && (\n          <div className=\"child-tasks\">\n            <RenderTasks tasks={task.children} toggleTaskStatus={toggleTaskStatus} handleEditTask={handleEditTask} />\n          </div>\n        )}\n      </div>\n    ))}\n  </div>\n);\n\nconst TaskList: React.FC = () => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [filter, setFilter] = useState<'ALL' | 'IN_PROGRESS' | 'DONE' | 'COMPLETE'>('ALL');\n  const [editingTaskId, setEditingTaskId] = useState<number | null>(null);\n  const [newTaskName, setNewTaskName] = useState<string>('');\n\n  const fetchTasks = useCallback(async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data: Task[] = await response.json();\n\n      const tasksWithDependencies = await Promise.all(\n        data.map(async (task) => {\n          const dependencyCount = await fetchDependencyCount(task.id);\n          const doneCount = await fetchDoneCount(task.id);\n          const completeCount = await fetchCompleteCount(task.id);\n          return { ...task, dependencyCount, doneCount, completeCount, children: [] };\n        })\n      );\n\n      setTasks(tasksWithDependencies);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  }, []);\n\n  const fetchDependencyCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/dependencies`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch dependency count');\n      }\n      const data = await response.json();\n      return data.dependencyCount || 0;\n    } catch (error) {\n      console.error('Error fetching dependency count:', error);\n      return 0;\n    }\n  };\n\n  const fetchDoneCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/done-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch DONE count');\n      }\n      const data = await response.json();\n      return data.doneCount || 0;\n    } catch (error) {\n      console.error('Error fetching DONE count:', error);\n      return 0;\n    }\n  };\n\n  const fetchCompleteCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/complete-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch COMPLETE count');\n      }\n      const data = await response.json();\n      return data.completeCount || 0;\n    } catch (error) {\n      console.error('Error fetching COMPLETE count:', error);\n      return 0;\n    }\n  };\n\n  const toggleTaskStatus = async (task: Task) => {\n    let updatedStatus: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n\n    const children = tasks.filter(t => t.parent_task_id === task.id);\n\n    if (children.length === 0) {\n      updatedStatus = task.status === 'COMPLETE' ? 'IN_PROGRESS' : 'COMPLETE';\n    } else {\n      const allComplete = children.every(child => child.status === 'COMPLETE');\n      const someInProgress = children.some(child => child.status === 'IN_PROGRESS');\n\n      if (task.status === 'COMPLETE') {\n        updatedStatus = 'IN_PROGRESS';\n      } else if (someInProgress) {\n        updatedStatus = 'DONE';\n      } else {\n        updatedStatus = 'COMPLETE';\n      }\n    }\n\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ...task, status: updatedStatus }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n\n      setTasks(prevTasks =>\n        prevTasks.map(t => {\n          if (t.id === task.id) {\n            return { ...t, status: updatedStatus };\n          }\n          return t;\n        })\n      );\n\n      const parentId = task.parent_task_id;\n      if (parentId) {\n        const siblings = tasks.filter(t => t.parent_task_id === parentId);\n        const allComplete = siblings.every(sibling => sibling.status === 'COMPLETE');\n\n        if (allComplete) {\n          await fetch(`http://localhost:5000/tasks/${parentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ status: 'COMPLETE' }),\n          });\n\n          setTasks(prevTasks =>\n            prevTasks.map(t => {\n              if (t.id === parentId) {\n                return { ...t, status: 'COMPLETE' };\n              }\n              return t;\n            })\n          );\n        }\n      }\n\n      window.location.reload();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again.');\n    }\n  };\n\n  const handleEditTask = (task: Task) => {\n    setEditingTaskId(task.id);\n    setNewTaskName(task.name);\n  };\n\n  const handleSaveEdit = async () => {\n    if (editingTaskId !== null) {\n      try {\n        const response = await fetch(`http://localhost:5000/tasks/edit/${editingTaskId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ ...tasks.find(t => t.id === editingTaskId), name: newTaskName }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to update task name');\n        }\n\n        setTasks(prevTasks =>\n          prevTasks.map(t => (t.id === editingTaskId ? { ...t, name: newTaskName } : t))\n        );\n        setEditingTaskId(null);\n        setNewTaskName('');\n      } catch (error) {\n        console.error('Error updating task name:', error);\n        alert('Failed to update task name. Please try again.');\n      }\n    }\n  };\n\n  const filteredTasks = tasks.filter(task => {\n    if (filter === 'ALL') return true;\n    if (filter === 'IN_PROGRESS') return task.status === 'IN_PROGRESS' || tasks.some(t => t.parent_task_id === task.id && t.status === 'IN_PROGRESS');\n    if (filter === 'DONE') return task.status === 'DONE' || tasks.some(t => t.parent_task_id === task.id && t.status === 'DONE');\n    if (filter === 'COMPLETE') return task.status === 'COMPLETE' || tasks.some(t => t.parent_task_id === task.id && t.status === 'COMPLETE');\n    return false;\n  });\n\n  // Function to build a nested structure\n  const buildTaskHierarchy = (tasks: Task[]) => {\n    const taskMap: { [key: number]: Task & { children: Task[] } } = {};\n    const hierarchy: (Task & { children: Task[] })[] = [];\n\n    tasks.forEach(task => {\n      taskMap[task.id] = { ...task, children: [] };\n    });\n\n    tasks.forEach(task => {\n      if (task.parent_task_id === null) {\n        hierarchy.push(taskMap[task.id]);\n      } else if (taskMap[task.parent_task_id]) {\n        taskMap[task.parent_task_id].children.push(taskMap[task.id]);\n      }\n    });\n\n    return hierarchy;\n  };\n\n  useEffect(() => {\n    fetchTasks();\n  }, [fetchTasks]);\n\n  return (\n    <div className=\"task-list-container\">\n      <h1>Task Management System</h1>\n      <div className=\"filter-controls\">\n        <label>Filter tasks: </label>\n        <select value={filter} onChange={e => setFilter(e.target.value as 'ALL' | 'IN_PROGRESS' | 'DONE' | 'COMPLETE')}>\n          <option value=\"ALL\">All</option>\n          <option value=\"IN_PROGRESS\">In Progress</option>\n          <option value=\"DONE\">Done</option>\n          <option value=\"COMPLETE\">Complete</option>\n        </select>\n      </div>\n      <RenderTasks tasks={buildTaskHierarchy(filteredTasks)} toggleTaskStatus={toggleTaskStatus} handleEditTask={handleEditTask} />\n      {editingTaskId !== null && (\n        <div className=\"edit-task-form\">\n          <input\n            type=\"text\"\n            value={newTaskName}\n            onChange={e => setNewTaskName(e.target.value)}\n            placeholder=\"Enter new task name\"\n          />\n          <button onClick={handleSaveEdit}>Save</button>\n          <button onClick={() => setEditingTaskId(null)}>Cancel</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"app-container\">\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Task List</Link>\n            </li>\n            <li>\n              <Link to=\"/create\">Create Task</Link>\n            </li>\n          </ul>\n        </nav>\n        <Routes>\n          <Route path=\"/\" element={<TaskList />} />\n          <Route path=\"/create\" element={<TaskFormPage />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}