{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\streamframe-task-manager\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport './App.css';\nimport TaskFormPage from './pages/TaskFormPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('ALL');\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data = await response.json();\n\n      // Fetch dependency counts for each task\n      const tasksWithDependencies = await Promise.all(data.map(async task => {\n        const dependencyCount = await fetchDependencyCount(task.id);\n        const doneCount = await fetchDoneCount(task.id);\n        const completeCount = await fetchCompleteCount(task.id);\n        return {\n          ...task,\n          dependencyCount,\n          doneCount,\n          completeCount\n        };\n      }));\n\n      // Build hierarchical structure\n      const hierarchicalTasks = buildHierarchy(tasksWithDependencies);\n      setTasks(hierarchicalTasks);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Fetch dependency count for a single task\n  const fetchDependencyCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/dependencies`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch dependency count');\n      }\n      const data = await response.json();\n      return data.dependencyCount || 0;\n    } catch (error) {\n      console.error('Error fetching dependency count:', error);\n      return 0;\n    }\n  };\n\n  // Fetch DONE count for a single task's dependencies\n  const fetchDoneCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/done-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch DONE count');\n      }\n      const data = await response.json();\n      return data.doneCount || 0;\n    } catch (error) {\n      console.error('Error fetching DONE count:', error);\n      return 0;\n    }\n  };\n\n  // Fetch COMPLETE count for a single task's dependencies\n  const fetchCompleteCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/complete-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch COMPLETE count');\n      }\n      const data = await response.json();\n      return data.completeCount || 0;\n    } catch (error) {\n      console.error('Error fetching COMPLETE count:', error);\n      return 0;\n    }\n  };\n\n  // Build hierarchical structure of tasks\n  const buildHierarchy = tasks => {\n    const taskMap = {};\n    tasks.forEach(task => {\n      task.children = []; // Initialize children array\n      taskMap[task.id] = task; // Map task by ID\n    });\n    const hierarchicalTasks = [];\n    tasks.forEach(task => {\n      if (task.parent_task_id) {\n        const parent = taskMap[task.parent_task_id];\n        if (parent) {\n          parent.children.push(task); // Add task to parent's children\n        }\n      } else {\n        hierarchicalTasks.push(task); // Top-level task\n      }\n    });\n    return hierarchicalTasks;\n  };\n\n  // Toggle task status\n  const toggleTaskStatus = async task => {\n    let updatedStatus;\n    const children = tasks.filter(t => t.parent_task_id === task.id);\n    if (children.length === 0) {\n      updatedStatus = task.status === 'COMPLETE' ? 'IN_PROGRESS' : 'COMPLETE';\n    } else {\n      const allComplete = children.every(child => child.status === 'COMPLETE');\n      const someInProgress = children.some(child => child.status === 'IN_PROGRESS');\n      if (task.status === 'COMPLETE') {\n        updatedStatus = 'IN_PROGRESS';\n      } else if (someInProgress) {\n        updatedStatus = 'DONE';\n      } else {\n        updatedStatus = 'COMPLETE';\n      }\n    }\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...task,\n          status: updatedStatus\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n      setTasks(prevTasks => prevTasks.map(t => t.id === task.id ? {\n        ...t,\n        status: updatedStatus\n      } : t));\n      const parentId = task.parent_task_id;\n      if (parentId) {\n        const siblings = tasks.filter(t => t.parent_task_id === parentId);\n        const allComplete = siblings.every(sibling => sibling.status === 'COMPLETE');\n        if (allComplete) {\n          await fetch(`http://localhost:5000/tasks/${parentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              status: 'COMPLETE'\n            })\n          });\n          setTasks(prevTasks => prevTasks.map(t => t.id === parentId ? {\n            ...t,\n            status: 'COMPLETE'\n          } : t));\n        }\n      }\n      window.location.reload();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again.');\n    }\n  };\n\n  // Filter tasks based on selected status\n  const filteredTasks = filter === 'ALL' ? tasks : tasks.filter(task => task.status === filter);\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Render tasks recursively\n  const renderTasks = taskList => {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: taskList.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [task.name, \" - \", task.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: task.status === 'DONE' || task.status === 'COMPLETE',\n              onChange: () => toggleTaskStatus(task)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this), task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), task.children && task.children.length > 0 && renderTasks(task.children), \" \"]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Listing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Filter by status:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: filter,\n        onChange: e => setFilter(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ALL\",\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"IN_PROGRESS\",\n          children: \"IN PROGRESS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"DONE\",\n          children: \"DONE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"COMPLETE\",\n          children: \"COMPLETE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), renderTasks(filteredTasks), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n\n// Sidebar component\n_s(TaskList, \"JemSKEgOUJgSGPl2+QsZ86Ys8/Y=\");\n_c = TaskList;\nconst Sidebar = () => /*#__PURE__*/_jsxDEV(\"nav\", {\n  className: \"sidebar\",\n  children: /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: [/*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Task Listing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/taskformpage\",\n        children: \"Task Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 231,\n  columnNumber: 3\n}, this);\n\n// Main App component with Router and Sidebar\n_c2 = Sidebar;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(TaskList, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 38\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/taskformpage\",\n            element: /*#__PURE__*/_jsxDEV(TaskFormPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"TaskList\");\n$RefreshReg$(_c2, \"Sidebar\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","Router","Route","Routes","Link","TaskFormPage","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","filter","setFilter","fetchTasks","response","fetch","ok","Error","data","json","tasksWithDependencies","Promise","all","map","task","dependencyCount","fetchDependencyCount","id","doneCount","fetchDoneCount","completeCount","fetchCompleteCount","hierarchicalTasks","buildHierarchy","error","console","taskId","taskMap","forEach","children","parent_task_id","parent","push","toggleTaskStatus","updatedStatus","t","length","status","allComplete","every","child","someInProgress","some","method","headers","body","JSON","stringify","prevTasks","parentId","siblings","sibling","window","location","reload","alert","filteredTasks","renderTasks","taskList","name","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","value","e","target","_c","Sidebar","className","to","_c2","App","path","element","_c3","$RefreshReg$"],"sources":["C:/Users/Acer/streamframe-task-manager/frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport './App.css';\nimport TaskFormPage from './pages/TaskFormPage';\n\ninterface Task {\n  id: number;\n  name: string;\n  status: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n  parent_task_id: number | null;\n  dependencyCount?: number;\n  doneCount?: number; // DONE count\n  completeCount?: number; // COMPLETE count\n  children?: Task[]; // New field for child tasks\n}\n\nconst TaskList: React.FC = () => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [filter, setFilter] = useState<'ALL' | 'IN_PROGRESS' | 'DONE' | 'COMPLETE'>('ALL');\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data: Task[] = await response.json();\n\n      // Fetch dependency counts for each task\n      const tasksWithDependencies = await Promise.all(\n        data.map(async (task) => {\n          const dependencyCount = await fetchDependencyCount(task.id);\n          const doneCount = await fetchDoneCount(task.id);\n          const completeCount = await fetchCompleteCount(task.id);\n          return { ...task, dependencyCount, doneCount, completeCount };\n        })\n      );\n\n      // Build hierarchical structure\n      const hierarchicalTasks = buildHierarchy(tasksWithDependencies);\n      setTasks(hierarchicalTasks);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Fetch dependency count for a single task\n  const fetchDependencyCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/dependencies`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch dependency count');\n      }\n      const data = await response.json();\n      return data.dependencyCount || 0;\n    } catch (error) {\n      console.error('Error fetching dependency count:', error);\n      return 0;\n    }\n  };\n\n  // Fetch DONE count for a single task's dependencies\n  const fetchDoneCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/done-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch DONE count');\n      }\n      const data = await response.json();\n      return data.doneCount || 0;\n    } catch (error) {\n      console.error('Error fetching DONE count:', error);\n      return 0;\n    }\n  };\n\n  // Fetch COMPLETE count for a single task's dependencies\n  const fetchCompleteCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/complete-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch COMPLETE count');\n      }\n      const data = await response.json();\n      return data.completeCount || 0;\n    } catch (error) {\n      console.error('Error fetching COMPLETE count:', error);\n      return 0;\n    }\n  };\n\n  // Build hierarchical structure of tasks\n  const buildHierarchy = (tasks: Task[]): Task[] => {\n    const taskMap: { [key: number]: Task } = {};\n    tasks.forEach(task => {\n      task.children = []; // Initialize children array\n      taskMap[task.id] = task; // Map task by ID\n    });\n\n    const hierarchicalTasks: Task[] = [];\n    tasks.forEach(task => {\n      if (task.parent_task_id) {\n        const parent = taskMap[task.parent_task_id];\n        if (parent) {\n          parent.children.push(task); // Add task to parent's children\n        }\n      } else {\n        hierarchicalTasks.push(task); // Top-level task\n      }\n    });\n\n    return hierarchicalTasks;\n  };\n\n  // Toggle task status\n  const toggleTaskStatus = async (task: Task) => {\n    let updatedStatus: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n\n    const children = tasks.filter(t => t.parent_task_id === task.id);\n\n    if (children.length === 0) {\n      updatedStatus = task.status === 'COMPLETE' ? 'IN_PROGRESS' : 'COMPLETE';\n    } else {\n      const allComplete = children.every(child => child.status === 'COMPLETE');\n      const someInProgress = children.some(child => child.status === 'IN_PROGRESS');\n\n      if (task.status === 'COMPLETE') {\n        updatedStatus = 'IN_PROGRESS';\n      } else if (someInProgress) {\n        updatedStatus = 'DONE';\n      } else {\n        updatedStatus = 'COMPLETE';\n      }\n    }\n\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ...task, status: updatedStatus }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n\n      setTasks(prevTasks =>\n        prevTasks.map(t => (t.id === task.id ? { ...t, status: updatedStatus } : t))\n      );\n\n      const parentId = task.parent_task_id;\n      if (parentId) {\n        const siblings = tasks.filter(t => t.parent_task_id === parentId);\n        const allComplete = siblings.every(sibling => sibling.status === 'COMPLETE');\n\n        if (allComplete) {\n          await fetch(`http://localhost:5000/tasks/${parentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ status: 'COMPLETE' }),\n          });\n\n          setTasks(prevTasks =>\n            prevTasks.map(t => (t.id === parentId ? { ...t, status: 'COMPLETE' } : t))\n          );\n        }\n      }\n\n      window.location.reload();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again.');\n    }\n  };\n\n  // Filter tasks based on selected status\n  const filteredTasks = filter === 'ALL' ? tasks : tasks.filter(task => task.status === filter);\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Render tasks recursively\n  const renderTasks = (taskList: Task[]) => {\n    return (\n      <ul>\n        {taskList.map(task => (\n          <li key={task.id}>\n            <div>\n              <span>{task.name} - {task.status}</span>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={task.status === 'DONE' || task.status === 'COMPLETE'}\n                  onChange={() => toggleTaskStatus(task)}\n                />\n                {task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE'}\n              </label>\n            </div>\n            {task.children && task.children.length > 0 && renderTasks(task.children)} {/* Recursively render children */}\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  return (\n    <div>\n      <h1>Task Listing</h1>\n      <label>\n        Filter by status:\n        <select value={filter} onChange={(e) => setFilter(e.target.value as 'ALL' | 'IN_PROGRESS' | 'DONE' | 'COMPLETE')}>\n          <option value=\"ALL\">All</option>\n          <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n          <option value=\"DONE\">DONE</option>\n          <option value=\"COMPLETE\">COMPLETE</option>\n        </select>\n      </label>\n      {renderTasks(filteredTasks)} {/* Render tasks recursively */}\n    </div>\n  );\n};\n\n// Sidebar component\nconst Sidebar: React.FC = () => (\n  <nav className=\"sidebar\">\n    <ul>\n      <li><Link to=\"/\">Task Listing</Link></li>\n      <li><Link to=\"/taskformpage\">Task Form</Link></li>\n    </ul>\n  </nav>\n);\n\n// Main App component with Router and Sidebar\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"app-container\">\n        <Sidebar />\n        <div className=\"content\">\n          <Routes>\n            <Route path=\"/\" element={<TaskList />} />\n            <Route path=\"/taskformpage\" element={<TaskFormPage />} />\n          </Routes>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}