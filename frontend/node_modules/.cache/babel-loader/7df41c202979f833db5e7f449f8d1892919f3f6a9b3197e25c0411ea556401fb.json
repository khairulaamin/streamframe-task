{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\streamframe-task-manager\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('ALL');\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data = await response.json();\n      setTasks(data);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Toggle task status\n  const toggleTaskStatus = async task => {\n    const updatedStatus = task.status === 'IN_PROGRESS' ? 'DONE' : 'IN_PROGRESS';\n    try {\n      await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...task,\n          status: updatedStatus\n        })\n      });\n      // Update the state locally after a successful update\n      setTasks(prevTasks => prevTasks.map(t => t.id === task.id ? {\n        ...t,\n        status: updatedStatus\n      } : t));\n    } catch (error) {\n      console.error('Error updating task status:', error);\n    }\n  };\n\n  // Filter tasks based on selected status\n  const filteredTasks = filter === 'ALL' ? tasks : tasks.filter(task => task.status === filter);\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Listing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Filter by status:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: filter,\n        onChange: e => setFilter(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"ALL\",\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"IN_PROGRESS\",\n          children: \"IN PROGRESS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"DONE\",\n          children: \"DONE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"COMPLETE\",\n          children: \"COMPLETE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredTasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"ID: \", task.id, \", Name: \", task.name, \", Status: \", task.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: task.status === 'DONE',\n            onChange: () => toggleTaskStatus(task)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), task.status === 'DONE' ? ' Mark as IN PROGRESS' : ' Mark as DONE']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"JemSKEgOUJgSGPl2+QsZ86Ys8/Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","filter","setFilter","fetchTasks","response","fetch","ok","Error","data","json","error","console","toggleTaskStatus","task","updatedStatus","status","id","method","headers","body","JSON","stringify","prevTasks","map","t","filteredTasks","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","name","type","checked","_c","$RefreshReg$"],"sources":["C:/Users/Acer/streamframe-task-manager/frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\ninterface Task {\n  id: number;\n  name: string;\n  status: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n  parent_task_id: number | null;\n}\n\nconst App: React.FC = () => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [filter, setFilter] = useState<'ALL' | 'IN_PROGRESS' | 'DONE' | 'COMPLETE'>('ALL');\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data: Task[] = await response.json();\n      setTasks(data);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Toggle task status\n  const toggleTaskStatus = async (task: Task) => {\n    const updatedStatus = task.status === 'IN_PROGRESS' ? 'DONE' : 'IN_PROGRESS';\n\n    try {\n      await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ...task, status: updatedStatus }),\n      });\n      // Update the state locally after a successful update\n      setTasks(prevTasks =>\n        prevTasks.map(t =>\n          t.id === task.id ? { ...t, status: updatedStatus } : t\n        )\n      );\n    } catch (error) {\n      console.error('Error updating task status:', error);\n    }\n  };\n\n  // Filter tasks based on selected status\n  const filteredTasks = filter === 'ALL' ? tasks : tasks.filter(task => task.status === filter);\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  return (\n    <div>\n      <h1>Task Listing</h1>\n      <label>\n        Filter by status:\n        <select value={filter} onChange={(e) => setFilter(e.target.value as 'ALL' | 'IN_PROGRESS' | 'DONE' | 'COMPLETE')}>\n          <option value=\"ALL\">All</option>\n          <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n          <option value=\"DONE\">DONE</option>\n          <option value=\"COMPLETE\">COMPLETE</option>\n        </select>\n      </label>\n      <ul>\n        {filteredTasks.map(task => (\n          <li key={task.id}>\n            <span>ID: {task.id}, Name: {task.name}, Status: {task.status}</span>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={task.status === 'DONE'}\n                onChange={() => toggleTaskStatus(task)}\n              />\n              {task.status === 'DONE' ? ' Mark as IN PROGRESS' : ' Mark as DONE'}\n            </label>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}