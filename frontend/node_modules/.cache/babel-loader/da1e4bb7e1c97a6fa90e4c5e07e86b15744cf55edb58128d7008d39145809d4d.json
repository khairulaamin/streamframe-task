{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\streamframe-task-manager\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport './App.css';\nimport TaskFormPage from './pages/TaskFormPage';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('ALL');\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data = await response.json();\n\n      // Fetch dependency counts for each task\n      const tasksWithDependencies = await Promise.all(data.map(async task => {\n        const dependencyCount = await fetchDependencyCount(task.id);\n        const doneCount = await fetchDoneCount(task.id);\n        const completeCount = await fetchCompleteCount(task.id);\n        return {\n          ...task,\n          dependencyCount,\n          doneCount,\n          completeCount\n        };\n      }));\n\n      // Build hierarchical structure\n      const hierarchicalTasks = buildHierarchicalTasks(tasksWithDependencies);\n      setTasks(hierarchicalTasks);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Build a hierarchical list of tasks\n  const buildHierarchicalTasks = tasks => {\n    const taskMap = {};\n    const hierarchicalTasks = [];\n\n    // Map tasks to an object for easy lookup\n    tasks.forEach(task => {\n      taskMap[task.id] = {\n        ...task,\n        children: []\n      }; // Initialize children as an empty array\n    });\n\n    // Build hierarchy\n    tasks.forEach(task => {\n      if (task.parent_task_id) {\n        const parent = taskMap[task.parent_task_id];\n        if (parent) {\n          if (!parent.children) {\n            parent.children = []; // Initialize if undefined\n          }\n          parent.children.push(task); // Add task to parent's children\n        }\n      } else {\n        hierarchicalTasks.push(task); // Top-level task\n      }\n    });\n    return hierarchicalTasks;\n  };\n\n  // Fetch dependency count for a single task\n  const fetchDependencyCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/dependencies`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch dependency count');\n      }\n      const data = await response.json();\n      return data.dependencyCount || 0;\n    } catch (error) {\n      console.error('Error fetching dependency count:', error);\n      return 0;\n    }\n  };\n\n  // Fetch DONE count for a single task's dependencies\n  const fetchDoneCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/done-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch DONE count');\n      }\n      const data = await response.json();\n      return data.doneCount || 0;\n    } catch (error) {\n      console.error('Error fetching DONE count:', error);\n      return 0;\n    }\n  };\n\n  // Fetch COMPLETE count for a single task's dependencies\n  const fetchCompleteCount = async taskId => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/complete-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch COMPLETE count');\n      }\n      const data = await response.json();\n      return data.completeCount || 0;\n    } catch (error) {\n      console.error('Error fetching COMPLETE count:', error);\n      return 0;\n    }\n  };\n\n  // Toggle task status\n  const toggleTaskStatus = async task => {\n    let updatedStatus;\n    const children = tasks.filter(t => t.parent_task_id === task.id);\n    if (children.length === 0) {\n      // No children, mark as COMPLETE when ticked\n      updatedStatus = task.status === 'COMPLETE' ? 'IN_PROGRESS' : 'COMPLETE';\n    } else {\n      // If it has children, check their status\n      const allComplete = children.every(child => child.status === 'COMPLETE');\n      const someInProgress = children.some(child => child.status === 'IN_PROGRESS');\n      if (task.status === 'COMPLETE') {\n        updatedStatus = 'IN_PROGRESS'; // Toggle back to IN_PROGRESS if already COMPLETE\n      } else if (someInProgress) {\n        updatedStatus = 'DONE'; // Some children are IN_PROGRESS, mark as DONE\n      } else {\n        updatedStatus = 'COMPLETE'; // All children are COMPLETE, mark as COMPLETE\n      }\n    }\n    try {\n      // Update task status in the backend\n      const response = await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...task,\n          status: updatedStatus\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n\n      // Update the local state immediately\n      setTasks(prevTasks => prevTasks.map(t => {\n        if (t.id === task.id) {\n          return {\n            ...t,\n            status: updatedStatus\n          };\n        }\n        return t;\n      }));\n\n      // Check if we need to update the parent task\n      const parentId = task.parent_task_id;\n      if (parentId) {\n        const siblings = tasks.filter(t => t.parent_task_id === parentId);\n        const allComplete = siblings.every(sibling => sibling.status === 'COMPLETE');\n\n        // If all siblings are complete, update the parent task to COMPLETE\n        if (allComplete) {\n          await fetch(`http://localhost:5000/tasks/${parentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              status: 'COMPLETE'\n            }) // Assuming the parent needs to be updated\n          });\n\n          // Update the parent task status in the local state\n          setTasks(prevTasks => prevTasks.map(t => {\n            if (t.id === parentId) {\n              return {\n                ...t,\n                status: 'COMPLETE'\n              };\n            }\n            return t;\n          }));\n        }\n      }\n\n      // Optionally, fetch all tasks again if you want to ensure consistency\n      // await fetchTasks();\n\n      window.location.reload();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again.');\n    }\n  };\n\n  // Filter tasks based on selected status\n  const filteredTasks = filter === 'ALL' ? tasks : tasks.filter(task => task.status === filter);\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Recursive function to render tasks\n  const renderTasks = tasks => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.parent_task_id !== null ? task.parent_task_id : 'N/A'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.dependencyCount !== undefined ? task.dependencyCount : '0'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.doneCount !== undefined ? task.doneCount : '0'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: task.completeCount !== undefined ? task.completeCount : '0'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: task.status === 'DONE' || task.status === 'COMPLETE',\n                onChange: () => toggleTaskStatus(task)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 19\n              }, this), task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), task.children && task.children.length > 0 && /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: 8,\n            children: /*#__PURE__*/_jsxDEV(\"table\", {\n              children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 245,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 246,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Status\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 247,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Parent Task ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 248,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Total Number of Dependencies\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Dependencies Marked as DONE\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 250,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Dependencies Marked as COMPLETE\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: \"Actions\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 252,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                children: renderTasks(task.children)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 15\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this))\n    }, void 0, false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Filter tasks:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: filter,\n          onChange: e => setFilter(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"ALL\",\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"IN_PROGRESS\",\n            children: \"In Progress\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"DONE\",\n            children: \"Done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"COMPLETE\",\n            children: \"Complete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Parent Task ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Total Number of Dependencies\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Dependencies Marked as DONE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Dependencies Marked as COMPLETE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: renderTasks(filteredTasks)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/task-form\",\n      className: \"add-task-button\",\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"JemSKEgOUJgSGPl2+QsZ86Ys8/Y=\");\n_c = TaskList;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(TaskList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/task-form\",\n        element: /*#__PURE__*/_jsxDEV(TaskFormPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"TaskList\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","useState","BrowserRouter","Router","Route","Routes","Link","TaskFormPage","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskList","_s","tasks","setTasks","filter","setFilter","fetchTasks","response","fetch","ok","Error","data","json","tasksWithDependencies","Promise","all","map","task","dependencyCount","fetchDependencyCount","id","doneCount","fetchDoneCount","completeCount","fetchCompleteCount","hierarchicalTasks","buildHierarchicalTasks","error","console","taskMap","forEach","children","parent_task_id","parent","push","taskId","toggleTaskStatus","updatedStatus","t","length","status","allComplete","every","child","someInProgress","some","method","headers","body","JSON","stringify","prevTasks","parentId","siblings","sibling","window","location","reload","alert","filteredTasks","renderTasks","fileName","_jsxFileName","lineNumber","columnNumber","name","undefined","type","checked","onChange","colSpan","className","value","e","target","to","_c","App","path","element","_c2","$RefreshReg$"],"sources":["C:/Users/Acer/streamframe-task-manager/frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport './App.css';\nimport TaskFormPage from './pages/TaskFormPage';\n\ninterface Task {\n  id: number;\n  name: string;\n  status: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n  parent_task_id: number | null;\n  dependencyCount?: number;\n  doneCount?: number;\n  completeCount?: number;\n  children?: Task[]; // Optional property for child tasks\n}\n\nconst TaskList: React.FC = () => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [filter, setFilter] = useState<'ALL' | 'IN_PROGRESS' | 'DONE' | 'COMPLETE'>('ALL');\n\n  // Fetch tasks from the backend\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data: Task[] = await response.json();\n\n      // Fetch dependency counts for each task\n      const tasksWithDependencies = await Promise.all(\n        data.map(async (task) => {\n          const dependencyCount = await fetchDependencyCount(task.id);\n          const doneCount = await fetchDoneCount(task.id);\n          const completeCount = await fetchCompleteCount(task.id);\n          return { ...task, dependencyCount, doneCount, completeCount };\n        })\n      );\n\n      // Build hierarchical structure\n      const hierarchicalTasks = buildHierarchicalTasks(tasksWithDependencies);\n      setTasks(hierarchicalTasks);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Build a hierarchical list of tasks\n  const buildHierarchicalTasks = (tasks: Task[]): Task[] => {\n    const taskMap: { [key: number]: Task & { children?: Task[] } } = {};\n    const hierarchicalTasks: Task[] = [];\n\n    // Map tasks to an object for easy lookup\n    tasks.forEach(task => {\n      taskMap[task.id] = { ...task, children: [] }; // Initialize children as an empty array\n    });\n\n    // Build hierarchy\n    tasks.forEach(task => {\n      if (task.parent_task_id) {\n        const parent = taskMap[task.parent_task_id];\n        if (parent) {\n          if (!parent.children) {\n            parent.children = []; // Initialize if undefined\n          }\n          parent.children.push(task); // Add task to parent's children\n        }\n      } else {\n        hierarchicalTasks.push(task); // Top-level task\n      }\n    });\n\n    return hierarchicalTasks;\n  };\n\n  // Fetch dependency count for a single task\n  const fetchDependencyCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/dependencies`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch dependency count');\n      }\n      const data = await response.json();\n      return data.dependencyCount || 0;\n    } catch (error) {\n      console.error('Error fetching dependency count:', error);\n      return 0;\n    }\n  };\n\n  // Fetch DONE count for a single task's dependencies\n  const fetchDoneCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/done-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch DONE count');\n      }\n      const data = await response.json();\n      return data.doneCount || 0;\n    } catch (error) {\n      console.error('Error fetching DONE count:', error);\n      return 0;\n    }\n  };\n\n  // Fetch COMPLETE count for a single task's dependencies\n  const fetchCompleteCount = async (taskId: number) => {\n    try {\n      const response = await fetch(`http://localhost:5000/tasks/${taskId}/complete-count`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch COMPLETE count');\n      }\n      const data = await response.json();\n      return data.completeCount || 0;\n    } catch (error) {\n      console.error('Error fetching COMPLETE count:', error);\n      return 0;\n    }\n  };\n\n  // Toggle task status\n  const toggleTaskStatus = async (task: Task) => {\n    let updatedStatus: 'IN_PROGRESS' | 'DONE' | 'COMPLETE';\n\n    const children = tasks.filter(t => t.parent_task_id === task.id);\n\n    if (children.length === 0) {\n      // No children, mark as COMPLETE when ticked\n      updatedStatus = task.status === 'COMPLETE' ? 'IN_PROGRESS' : 'COMPLETE';\n    } else {\n      // If it has children, check their status\n      const allComplete = children.every(child => child.status === 'COMPLETE');\n      const someInProgress = children.some(child => child.status === 'IN_PROGRESS');\n\n      if (task.status === 'COMPLETE') {\n        updatedStatus = 'IN_PROGRESS'; // Toggle back to IN_PROGRESS if already COMPLETE\n      } else if (someInProgress) {\n        updatedStatus = 'DONE'; // Some children are IN_PROGRESS, mark as DONE\n      } else {\n        updatedStatus = 'COMPLETE'; // All children are COMPLETE, mark as COMPLETE\n      }\n    }\n\n    try {\n      // Update task status in the backend\n      const response = await fetch(`http://localhost:5000/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ ...task, status: updatedStatus }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update task status');\n      }\n\n      // Update the local state immediately\n      setTasks(prevTasks =>\n        prevTasks.map(t => {\n          if (t.id === task.id) {\n            return { ...t, status: updatedStatus };\n          }\n          return t;\n        })\n      );\n\n      // Check if we need to update the parent task\n      const parentId = task.parent_task_id;\n      if (parentId) {\n        const siblings = tasks.filter(t => t.parent_task_id === parentId);\n        const allComplete = siblings.every(sibling => sibling.status === 'COMPLETE');\n\n        // If all siblings are complete, update the parent task to COMPLETE\n        if (allComplete) {\n          await fetch(`http://localhost:5000/tasks/${parentId}`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ status: 'COMPLETE' }), // Assuming the parent needs to be updated\n          });\n\n          // Update the parent task status in the local state\n          setTasks(prevTasks =>\n            prevTasks.map(t => {\n              if (t.id === parentId) {\n                return { ...t, status: 'COMPLETE' };\n              }\n              return t;\n            })\n          );\n        }\n      }\n\n      // Optionally, fetch all tasks again if you want to ensure consistency\n      // await fetchTasks();\n\n      window.location.reload();\n    } catch (error) {\n      console.error('Error updating task status:', error);\n      alert('Failed to update task status. Please try again.');\n    }\n  };\n\n  // Filter tasks based on selected status\n  const filteredTasks = filter === 'ALL' ? tasks : tasks.filter(task => task.status === filter);\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Recursive function to render tasks\n  const renderTasks = (tasks: Task[]) => {\n    return (\n      <>\n        {tasks.map(task => (\n          <React.Fragment key={task.id}>\n            <tr>\n              <td>{task.id}</td>\n              <td>{task.name}</td>\n              <td>{task.status}</td>\n              <td>{task.parent_task_id !== null ? task.parent_task_id : 'N/A'}</td>\n              <td>{task.dependencyCount !== undefined ? task.dependencyCount : '0'}</td>\n              <td>{task.doneCount !== undefined ? task.doneCount : '0'}</td>\n              <td>{task.completeCount !== undefined ? task.completeCount : '0'}</td>\n              <td>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={task.status === 'DONE' || task.status === 'COMPLETE'}\n                    onChange={() => toggleTaskStatus(task)}\n                  />\n                  {task.status === 'DONE' || task.status === 'COMPLETE' ? ' Mark as IN PROGRESS' : ' Mark as DONE'}\n                </label>\n              </td>\n            </tr>\n            {/* Render children if they exist */}\n            {task.children && task.children.length > 0 && (\n              <tr>\n                <td colSpan={8}>\n                  <table>\n                    <thead>\n                      <tr>\n                        <th>ID</th>\n                        <th>Name</th>\n                        <th>Status</th>\n                        <th>Parent Task ID</th>\n                        <th>Total Number of Dependencies</th>\n                        <th>Dependencies Marked as DONE</th>\n                        <th>Dependencies Marked as COMPLETE</th>\n                        <th>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>{renderTasks(task.children)}</tbody>\n                  </table>\n                </td>\n              </tr>\n            )}\n          </React.Fragment>\n        ))}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"task-list\">\n      <h1>Task List</h1>\n      <div>\n        <label>\n          Filter tasks:\n          <select value={filter} onChange={e => setFilter(e.target.value as 'ALL' | 'IN_PROGRESS' | 'DONE' | 'COMPLETE')}>\n            <option value=\"ALL\">All</option>\n            <option value=\"IN_PROGRESS\">In Progress</option>\n            <option value=\"DONE\">Done</option>\n            <option value=\"COMPLETE\">Complete</option>\n          </select>\n        </label>\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Status</th>\n            <th>Parent Task ID</th>\n            <th>Total Number of Dependencies</th>\n            <th>Dependencies Marked as DONE</th>\n            <th>Dependencies Marked as COMPLETE</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {renderTasks(filteredTasks)}\n        </tbody>\n      </table>\n      <Link to=\"/task-form\" className=\"add-task-button\">Add Task</Link>\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<TaskList />} />\n        <Route path=\"/task-form\" element={<TaskFormPage />} />\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}